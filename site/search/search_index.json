{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Elfskot Docs Elfskot provides two methods to integrate with our services. To get an impression of which data is available, see the models page . REST API Integrate or build your own application directly on our REST API. Integrating with our API gives more flexibility and control, but comes at the cost of being more complex to set up. If the integration is simple, e.g. syncing article data, it is recommended to use the SDK. For more information about our API, see the getting started with the API . SDK Elfskot provides an easy way to integrate with our applications through our SDK. Our SDK has been developed in C#, and is available as a Nuget package . For more information about our SDK, see the getting started with the SDK . Support If you are missing information, or need support, please reach out to us on help@elfskot.com .","title":"Getting started"},{"location":"#welcome-to-elfskot-docs","text":"Elfskot provides two methods to integrate with our services. To get an impression of which data is available, see the models page .","title":"Welcome to Elfskot Docs"},{"location":"#rest-api","text":"Integrate or build your own application directly on our REST API. Integrating with our API gives more flexibility and control, but comes at the cost of being more complex to set up. If the integration is simple, e.g. syncing article data, it is recommended to use the SDK. For more information about our API, see the getting started with the API .","title":"REST API"},{"location":"#sdk","text":"Elfskot provides an easy way to integrate with our applications through our SDK. Our SDK has been developed in C#, and is available as a Nuget package . For more information about our SDK, see the getting started with the SDK .","title":"SDK"},{"location":"#support","text":"If you are missing information, or need support, please reach out to us on help@elfskot.com .","title":"Support"},{"location":"models/","text":"Models This page shows an overview of the available models. This list doesn't contain all the possible properties, but only the properties that are relevant. Application Events There are a number of application event types available through the API. See application event tutorials for more info. Name Type Description Id Guid Identifier of the application event. IntegrationApplicationId Guid Identifier of the integration application that should handle this application event. Handled bool Indicate whether this application event has been handled by the integration application defined by IntegrationApplicationId . HandledDate DateTime DateTime at which the application event was handled by the integration application. Success bool Defines whether the application event was handled successfully by the integration application. ReasonPhrase string Explanation of why the application event has the current success status. Besides the common application event properties, each type of application event has additional information available to it: QuotationRequested Name Type Description QuotationId Guid Identifier of the requested quotation. QuotationToPending Name Type Description QuotationId Guid Identifier of the quotation who's status is set to pending. QuotationToAccepted Name Type Description QuotationId Guid Identifier of the quotation who's status is set to accepted. Category Name Type Description Id Guid Identifier of the category. Texts CategoryText[] Translated titles of the category. Subcategories Category[] Array of subcategories. ParentId Guid Identifier of the parent category. Order integer Order in which the category should be displayed in the different product selection pages. CategoryText Name Type Description Id Guid Identifier of the category text. Value string Value of the text. LanguageIso string Two letter ISO (639-1) code of the text language. CategoryId Guid Identifier of the category. CrmAccount Name Type Description Id Guid Identifier of the CRM account. Salutation string The salutation e.g. 'Dear sir/madam,' FullName string (Read-only) Full name of the account. FirstName string LastNamePrefix string The prefix of the lastName e.g. [FirstName] van der [LastName] LastName string CompanyName string Name of the company. Email string Phone1 string Primary phone number. Phone2 string Secondary phone number. StreetName string HouseNumber string PostalCode string City string CountryIso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. CocNumber string Chamber of Commerce number. VatNumber string Iban string Type integer Type of the CRM account. Relationship type Key Description 0 Customer 1 Delivery address 2 Employee Feature Every configuration model is based on features. Features are used to capture rich product information (texts, images, pricing). Once created, features can be categorized and implemented in product structures. Name Type Description Id Guid Identifier of the feature. Name string Name of the feature. ArticleCode string For reference purposes; e.g. the ERP item code. Type integer The type is 0 by default, and 2 if the feature should be displayed as a color picker in the configurator. SalesPrice decimal The sales price of the feature. MinValue decimal Minimal amount. Example: minimal width of a bed has to be 110 cm. A user cannot enter quantities below this minimal value. MaxValue decimal Maximum amount. Example: maximum width of a bed is 210 cm. A user cannot enter quantities higher than this maximum value. StepValue decimal The step amount that is taken into consideration (between min/ max values). Example: with a step value of 10 cm a user cannot select a width of 115cm. This will be rounded off to 120cm. PackingUnit decimal The amount that has to be taken into account when rounding up on the material list. Example: several lines of the same nuts are generated from the configurator to the quotation. This function sums-up all these lines and rounds it up to the packing unit quantity. CategoryId Guid Identifier for the category to which this feature is attached. SubcategoryIds Guid[] List of identifiers for sub-categories. Tags string[] List of tags. A tag can be used to give a feature a certain label. MarginPct decimal Properties FeatureHasFeatureProperty[] Texts FeatureText[] CardImageUrl string URL for the image of the feature. This image is displayed in the cards. OrganizationSellsFeature OrganizationSellsFeature[] VATId Guid VAT that is used as default for this feature. UnitOfMeasurementId Guid Unit of measurement for this feature. FeatureText Name Type Description Id Guid Identifier of the feature text. LanguageIso string Two letter ISO (639-1) code of the text language. Type integer Type of the feature text. Value string Text value. FeatureId Guid Identifier of the feature. Feature text type Key Description 0 Descriptions : If used; the description will be shown instead of \u2018name\u2019. If left blank; the feature \u2018name\u2019 will be shown in the configurator. 1 Extended descriptions: If used; this text will be shown under the description/name in the configurator. 2 More info: If used; more info can be opened in the configurator. This information is showed in a screen-wide pop-up. 5 Quotation text: Optionally, this info can be generated on the quotation template (PDF). FeatureProperty Name Type Description Id Guid Identifier of the property. Name string Name of the property. Type integer Type of the property AssociatedFeatures AssociatedFeatureProperty[] If the type of this property is set to 1 (AssociatedFeatures) this property is filled with the relationships with features that can be associated with this property. FeaturePropertyType Key Description 0 Input : If the feature property is marked as a Input type; a decimal value can be associated with this property. 1 AssociatedFeatures : If the feature property is marked as a AssociatedFeatures type; a selection of defined features can be associated with this property. AssociatedFeatureProperty The AssociatedFeatureProperty is a relationship between a feature property's AssociatedFeatures list and a Feature. Name Type Description Id Guid Identifier of the associated feature property. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . FeatureHasFeatureProperty Relationship between a feature and a feature property. Name Type Description Id Guid Identifier of the FeatureHasFeatureProperty relationship. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . Value decimal If the type of the FeaturePropery is set to 0 (Input); this property holds the input value. AssociatedFeatureId Guid If the type of the FeatureProperty is set to 1 (AssociatedFeature); this property holds the feature identifier that is associated with this property. Organization Name Type Description Id Guid Identifier of the organization. Name string Name of the organization. SettingsId Guid Identifier of the settings corresponding to this organization. Users User[] List of users that are part of this organization. DefaultDiscountPct decimal Organization's default discount percentage. Calculates the margin by decreasing the purchase price. DefaultUpValuePct decimal Organization's default up value percentage. Calculates the margin by increasing the sales price. VAT Name Type Description Id Guid Identifier of the VAT. Name string Describes the VAT. Pct decimal Percentage value of the VAT e.g. 21. IncludesVAT boolean Defines whether the price already includes VAT. Quotation Name Type Description Id Guid Identifier for the quotation. QuotationNumber int Unique quotation number that is used as a reference. VersionNumber int Version number of the quotation. Default is 1 . RevisionOfId Guid Identifier of the quotation on which this revision is based. Status integer The status of the quotation. IsExpired bool (Read-only) Returns true if the quotation is expired. StatusDescription string (Read-only) Returns the status of the quotation as a text. Example: Concept or Accepted Remarks string A field for remarks. Used to add notes to the quotation. Subject string The subject of the quotation. ExpiresDate DateTime Date when the state of the quotation is set to expired. DeliveryDate DateTime Date when the quotation is delivered. DebtorId Guid Identifier of the debtor, which is a CRM account . SellerId Guid Identifier of the seller, which is a CRM account . ShipToId Guid Identifier for the shipping address, which is a CRM account . Margin decimal The margin that is used on this quotation in percentages. Example: for 10% the value is 10 . Lines QuotationLine[] Quotation lines for the quotation. CurrencyIso string Two letter ISO (639-1) code of the currency. LanguageIso string Two letter ISO (639-1) code of the language. Files QuotationFile[] List of quotation files that are attached. TotalDiscountAmt decimal (Read-only) Total amount of discount on the total price. TotalDiscountPct decimal Total percentage of discount, e.g. 10 for 10%. SubTotalExclPrice decimal (Read-only) Subtotal price excluding VAT. SubTotalInclPrice decimal (Read-only) Subtotal including VAT. TotalExclPrice decimal (Read-only) Total price excluding VAT. TotalInclPrice decimal (Read-only) Total price including VAT. SubTotalMargin decimal (Read-only) Subtotal margin. TotalMargin decimal (Read-only) Total margin. TotalMarginDiscount decimal (Read-only) Total margin discount. SubTotalPurchasePrice decimal (Read-only) Subtotal purchase price. WholeSaleDiscountAmt decimal (Read-only) Wholesale discount amount. WholeSaleDiscountPct decimal (Read-only) Wholesale discount percentage. QuotationStatus A quotation can have the following states: Key Description 0 Concept 1 Declined 2 Accepted 3 Expired 4 Revised 5 Pending 6 Order QuotationLine Name Type Description QuotationId Guid Identifier of the quotation to which this line belongs. LineNumber int Indicates the sequence of the lines within one quotation. ArticleCode string For reference purposes, e.g. an ERP item code. CardImageUrl string URL to the image for the feature. Description string (Read-only) Description of the feature. ExtendedDescription string (Read-only) Extended description of the feature. MoreInfo string (Read-only) More info of the feature. QuotationText string (Read-only) Quotation text of the feature. FeatureId Guid Identifier of the feature. QuantityAmount decimal Quantity of the feature on this line. Quantity string (Read-only) Number formatted quantity, e.g. 100.14 . UnitOfMeasurement string (Read-only) Unit of measurement of the feature. Hidden bool Indicates if the line is visible in EMS. ParentLineId Guid Identifier of the parent line (QuotationLine). GroupedRootLine bool Indicates if the quotation line is the root of a group of lines. GroupId Guid Identifier of the group to which this line belongs. GroupOrder int Indicates the order in which the groups are displayed. AddedFromConfiguration bool Indicates that the line has been added from a configuration. DiscountPct decimal Discount percentage, e.g. 10 . MarginPct decimal (Read-only) Margin percentage. GroupDiscountPct decimal Discount percentage on the group, e.g. 10 . TotalExclPrice decimal (Read-only) Total price of the quotation line excluding VAT. TotalExclPriceExclDiscount decimal (Read-only) Total price of the quotation excluding VAT and discount. TotalInclPrice decimal (Read-only) Total price including VAT. GroupBaseExclPrice decimal (Read-only) GroupBaseInclPrice decimal (Read-only) GroupAdditionalExclPrice decimal (Read-only) GroupAdditionalInclPrice decimal (Read-only) GroupTotalExclPrice decimal (Read-only) GroupTotalInclPrice decimal (Read-only) DefaultPurchasePriceDiscountPct decimal (Read-only) PurchasePrice decimal (Read-only) UnitPrice decimal Unit price of the feature. TotalExclMargin decimal (Read-only) TotalInclMargin decimal (Read-only) GroupPurchasePrice decimal (Read-only) GroupMargin decimal (Read-only) QuotationFile Name Type Description QuotationId Guid Identifier of the quotation. FileId Guid Identifier of the FileEntity . FileEntity Name Type Description Id Guid Identifier of the file entity. Name string Name of the file. Url string URL of the file. UnitOfMeasurement Name Type Description Id Guid Identifier for the unit of measurement. Code string The code for the unit of measurement. Example: kg . Description string The description for the unit of measurement. Example: Kilogram . Missing a property? Feel free to contact us at support@elfskot.com .","title":"Models"},{"location":"models/#models","text":"This page shows an overview of the available models. This list doesn't contain all the possible properties, but only the properties that are relevant.","title":"Models"},{"location":"models/#application-events","text":"There are a number of application event types available through the API. See application event tutorials for more info. Name Type Description Id Guid Identifier of the application event. IntegrationApplicationId Guid Identifier of the integration application that should handle this application event. Handled bool Indicate whether this application event has been handled by the integration application defined by IntegrationApplicationId . HandledDate DateTime DateTime at which the application event was handled by the integration application. Success bool Defines whether the application event was handled successfully by the integration application. ReasonPhrase string Explanation of why the application event has the current success status. Besides the common application event properties, each type of application event has additional information available to it:","title":"Application Events"},{"location":"models/#quotationrequested","text":"Name Type Description QuotationId Guid Identifier of the requested quotation.","title":"QuotationRequested"},{"location":"models/#quotationtopending","text":"Name Type Description QuotationId Guid Identifier of the quotation who's status is set to pending.","title":"QuotationToPending"},{"location":"models/#quotationtoaccepted","text":"Name Type Description QuotationId Guid Identifier of the quotation who's status is set to accepted.","title":"QuotationToAccepted"},{"location":"models/#category","text":"Name Type Description Id Guid Identifier of the category. Texts CategoryText[] Translated titles of the category. Subcategories Category[] Array of subcategories. ParentId Guid Identifier of the parent category. Order integer Order in which the category should be displayed in the different product selection pages.","title":"Category"},{"location":"models/#categorytext","text":"Name Type Description Id Guid Identifier of the category text. Value string Value of the text. LanguageIso string Two letter ISO (639-1) code of the text language. CategoryId Guid Identifier of the category.","title":"CategoryText"},{"location":"models/#crmaccount","text":"Name Type Description Id Guid Identifier of the CRM account. Salutation string The salutation e.g. 'Dear sir/madam,' FullName string (Read-only) Full name of the account. FirstName string LastNamePrefix string The prefix of the lastName e.g. [FirstName] van der [LastName] LastName string CompanyName string Name of the company. Email string Phone1 string Primary phone number. Phone2 string Secondary phone number. StreetName string HouseNumber string PostalCode string City string CountryIso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. CocNumber string Chamber of Commerce number. VatNumber string Iban string Type integer Type of the CRM account.","title":"CrmAccount"},{"location":"models/#relationship-type","text":"Key Description 0 Customer 1 Delivery address 2 Employee","title":"Relationship type"},{"location":"models/#feature","text":"Every configuration model is based on features. Features are used to capture rich product information (texts, images, pricing). Once created, features can be categorized and implemented in product structures. Name Type Description Id Guid Identifier of the feature. Name string Name of the feature. ArticleCode string For reference purposes; e.g. the ERP item code. Type integer The type is 0 by default, and 2 if the feature should be displayed as a color picker in the configurator. SalesPrice decimal The sales price of the feature. MinValue decimal Minimal amount. Example: minimal width of a bed has to be 110 cm. A user cannot enter quantities below this minimal value. MaxValue decimal Maximum amount. Example: maximum width of a bed is 210 cm. A user cannot enter quantities higher than this maximum value. StepValue decimal The step amount that is taken into consideration (between min/ max values). Example: with a step value of 10 cm a user cannot select a width of 115cm. This will be rounded off to 120cm. PackingUnit decimal The amount that has to be taken into account when rounding up on the material list. Example: several lines of the same nuts are generated from the configurator to the quotation. This function sums-up all these lines and rounds it up to the packing unit quantity. CategoryId Guid Identifier for the category to which this feature is attached. SubcategoryIds Guid[] List of identifiers for sub-categories. Tags string[] List of tags. A tag can be used to give a feature a certain label. MarginPct decimal Properties FeatureHasFeatureProperty[] Texts FeatureText[] CardImageUrl string URL for the image of the feature. This image is displayed in the cards. OrganizationSellsFeature OrganizationSellsFeature[] VATId Guid VAT that is used as default for this feature. UnitOfMeasurementId Guid Unit of measurement for this feature.","title":"Feature"},{"location":"models/#featuretext","text":"Name Type Description Id Guid Identifier of the feature text. LanguageIso string Two letter ISO (639-1) code of the text language. Type integer Type of the feature text. Value string Text value. FeatureId Guid Identifier of the feature.","title":"FeatureText"},{"location":"models/#feature-text-type","text":"Key Description 0 Descriptions : If used; the description will be shown instead of \u2018name\u2019. If left blank; the feature \u2018name\u2019 will be shown in the configurator. 1 Extended descriptions: If used; this text will be shown under the description/name in the configurator. 2 More info: If used; more info can be opened in the configurator. This information is showed in a screen-wide pop-up. 5 Quotation text: Optionally, this info can be generated on the quotation template (PDF).","title":"Feature text type"},{"location":"models/#featureproperty","text":"Name Type Description Id Guid Identifier of the property. Name string Name of the property. Type integer Type of the property AssociatedFeatures AssociatedFeatureProperty[] If the type of this property is set to 1 (AssociatedFeatures) this property is filled with the relationships with features that can be associated with this property.","title":"FeatureProperty"},{"location":"models/#featurepropertytype","text":"Key Description 0 Input : If the feature property is marked as a Input type; a decimal value can be associated with this property. 1 AssociatedFeatures : If the feature property is marked as a AssociatedFeatures type; a selection of defined features can be associated with this property.","title":"FeaturePropertyType"},{"location":"models/#associatedfeatureproperty","text":"The AssociatedFeatureProperty is a relationship between a feature property's AssociatedFeatures list and a Feature. Name Type Description Id Guid Identifier of the associated feature property. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature .","title":"AssociatedFeatureProperty"},{"location":"models/#featurehasfeatureproperty","text":"Relationship between a feature and a feature property. Name Type Description Id Guid Identifier of the FeatureHasFeatureProperty relationship. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . Value decimal If the type of the FeaturePropery is set to 0 (Input); this property holds the input value. AssociatedFeatureId Guid If the type of the FeatureProperty is set to 1 (AssociatedFeature); this property holds the feature identifier that is associated with this property.","title":"FeatureHasFeatureProperty"},{"location":"models/#organization","text":"Name Type Description Id Guid Identifier of the organization. Name string Name of the organization. SettingsId Guid Identifier of the settings corresponding to this organization. Users User[] List of users that are part of this organization. DefaultDiscountPct decimal Organization's default discount percentage. Calculates the margin by decreasing the purchase price. DefaultUpValuePct decimal Organization's default up value percentage. Calculates the margin by increasing the sales price.","title":"Organization"},{"location":"models/#vat","text":"Name Type Description Id Guid Identifier of the VAT. Name string Describes the VAT. Pct decimal Percentage value of the VAT e.g. 21. IncludesVAT boolean Defines whether the price already includes VAT.","title":"VAT"},{"location":"models/#quotation","text":"Name Type Description Id Guid Identifier for the quotation. QuotationNumber int Unique quotation number that is used as a reference. VersionNumber int Version number of the quotation. Default is 1 . RevisionOfId Guid Identifier of the quotation on which this revision is based. Status integer The status of the quotation. IsExpired bool (Read-only) Returns true if the quotation is expired. StatusDescription string (Read-only) Returns the status of the quotation as a text. Example: Concept or Accepted Remarks string A field for remarks. Used to add notes to the quotation. Subject string The subject of the quotation. ExpiresDate DateTime Date when the state of the quotation is set to expired. DeliveryDate DateTime Date when the quotation is delivered. DebtorId Guid Identifier of the debtor, which is a CRM account . SellerId Guid Identifier of the seller, which is a CRM account . ShipToId Guid Identifier for the shipping address, which is a CRM account . Margin decimal The margin that is used on this quotation in percentages. Example: for 10% the value is 10 . Lines QuotationLine[] Quotation lines for the quotation. CurrencyIso string Two letter ISO (639-1) code of the currency. LanguageIso string Two letter ISO (639-1) code of the language. Files QuotationFile[] List of quotation files that are attached. TotalDiscountAmt decimal (Read-only) Total amount of discount on the total price. TotalDiscountPct decimal Total percentage of discount, e.g. 10 for 10%. SubTotalExclPrice decimal (Read-only) Subtotal price excluding VAT. SubTotalInclPrice decimal (Read-only) Subtotal including VAT. TotalExclPrice decimal (Read-only) Total price excluding VAT. TotalInclPrice decimal (Read-only) Total price including VAT. SubTotalMargin decimal (Read-only) Subtotal margin. TotalMargin decimal (Read-only) Total margin. TotalMarginDiscount decimal (Read-only) Total margin discount. SubTotalPurchasePrice decimal (Read-only) Subtotal purchase price. WholeSaleDiscountAmt decimal (Read-only) Wholesale discount amount. WholeSaleDiscountPct decimal (Read-only) Wholesale discount percentage.","title":"Quotation"},{"location":"models/#quotationstatus","text":"A quotation can have the following states: Key Description 0 Concept 1 Declined 2 Accepted 3 Expired 4 Revised 5 Pending 6 Order","title":"QuotationStatus"},{"location":"models/#quotationline","text":"Name Type Description QuotationId Guid Identifier of the quotation to which this line belongs. LineNumber int Indicates the sequence of the lines within one quotation. ArticleCode string For reference purposes, e.g. an ERP item code. CardImageUrl string URL to the image for the feature. Description string (Read-only) Description of the feature. ExtendedDescription string (Read-only) Extended description of the feature. MoreInfo string (Read-only) More info of the feature. QuotationText string (Read-only) Quotation text of the feature. FeatureId Guid Identifier of the feature. QuantityAmount decimal Quantity of the feature on this line. Quantity string (Read-only) Number formatted quantity, e.g. 100.14 . UnitOfMeasurement string (Read-only) Unit of measurement of the feature. Hidden bool Indicates if the line is visible in EMS. ParentLineId Guid Identifier of the parent line (QuotationLine). GroupedRootLine bool Indicates if the quotation line is the root of a group of lines. GroupId Guid Identifier of the group to which this line belongs. GroupOrder int Indicates the order in which the groups are displayed. AddedFromConfiguration bool Indicates that the line has been added from a configuration. DiscountPct decimal Discount percentage, e.g. 10 . MarginPct decimal (Read-only) Margin percentage. GroupDiscountPct decimal Discount percentage on the group, e.g. 10 . TotalExclPrice decimal (Read-only) Total price of the quotation line excluding VAT. TotalExclPriceExclDiscount decimal (Read-only) Total price of the quotation excluding VAT and discount. TotalInclPrice decimal (Read-only) Total price including VAT. GroupBaseExclPrice decimal (Read-only) GroupBaseInclPrice decimal (Read-only) GroupAdditionalExclPrice decimal (Read-only) GroupAdditionalInclPrice decimal (Read-only) GroupTotalExclPrice decimal (Read-only) GroupTotalInclPrice decimal (Read-only) DefaultPurchasePriceDiscountPct decimal (Read-only) PurchasePrice decimal (Read-only) UnitPrice decimal Unit price of the feature. TotalExclMargin decimal (Read-only) TotalInclMargin decimal (Read-only) GroupPurchasePrice decimal (Read-only) GroupMargin decimal (Read-only)","title":"QuotationLine"},{"location":"models/#quotationfile","text":"Name Type Description QuotationId Guid Identifier of the quotation. FileId Guid Identifier of the FileEntity .","title":"QuotationFile"},{"location":"models/#fileentity","text":"Name Type Description Id Guid Identifier of the file entity. Name string Name of the file. Url string URL of the file.","title":"FileEntity"},{"location":"models/#unitofmeasurement","text":"Name Type Description Id Guid Identifier for the unit of measurement. Code string The code for the unit of measurement. Example: kg . Description string The description for the unit of measurement. Example: Kilogram . Missing a property? Feel free to contact us at support@elfskot.com .","title":"UnitOfMeasurement"},{"location":"api/endpoints-crud/","text":"Basic endpoints The main endpoint for the API is: https://api.elfskot.cloud . Model URI Supported methods ApplicationEvents /api/2/applicationevents GET, POST, PUT, DELETE AssociatedFeatureProperties /api/2/associatedfeatureproperties GET, POST, PUT, DELETE Categories /api/2/categories GET, POST, PUT, DELETE CrmAccounts /api/2/crmaccounts GET, POST, PUT, DELETE FeatureHasFeatureProperty /api/2/featurehasfeatureproperties GET, POST, PUT, DELETE FeatureProperty /api/2/featureproperties GET, POST, PUT, DELETE Feature /api/2/features GET, POST, PUT, DELETE Organizations /api/2/organizations GET, POST, PUT, DELETE QuotationLine /api/2/quotationlines GET, POST, PUT, DELETE QuotationProperty /api/2/quotationproperties GET, POST, PUT, DELETE Quotation /api/2/quotations GET, POST, PUT, DELETE UnitOfMeasurement /api/2/uom GET, POST, PUT, DELETE VAT /api/2/vats GET, POST, PUT, DELETE Additional note about GET: If the endpoint is requested without an ID, a list of all the entities will be returned. If an ID is specified, a single entity is returned. It is also possible to use query parameters when retrieving a list of entities: Name Type Description Example Skip integer Specifies how many entities should be skipped in the result. GET /api/2/quotations?skip=10&limit=100 Limit integer Specifies how many entities you want to retrieve. GET /api/2/quotations?skip=10&limit=100 Orderby string Used to order the result based on a property of the entity. GET /api/2/features?orderby=name Descending boolean By default the Orderby parameter orders the result in ascending order. If you want to retrieve the result in descending order you need to specify the descending parameter. GET /api/2/features?orderby=name&descending=true Include string All non-native types are by default excluded from the API response. If you require them you have to specify this in the request. Note: Include values should be formatted in CamelCase. GET /api/2/quotations?include=Lines Will return all the lines of the corresponding quotations. You can add multiple include parameters to suffice all your requirements: GET /api/2/quotations?include=Lines&include=Debtor&include=Seller Filter string Besides the native query parameters above; it is also possible to query on entity specific properties. For example; if you want to retrieve a list of all quotations that have the synced property set to true you can use the url: /api/2/quotations?synced=true . Where synced is a property of the quotation model. Additional note about POST/PUT: These methods support a single entity as well as a list of entities. Based on the provided entities the method for a single or bulk will be picked automatically.","title":"Basic endpoints"},{"location":"api/endpoints-crud/#basic-endpoints","text":"The main endpoint for the API is: https://api.elfskot.cloud . Model URI Supported methods ApplicationEvents /api/2/applicationevents GET, POST, PUT, DELETE AssociatedFeatureProperties /api/2/associatedfeatureproperties GET, POST, PUT, DELETE Categories /api/2/categories GET, POST, PUT, DELETE CrmAccounts /api/2/crmaccounts GET, POST, PUT, DELETE FeatureHasFeatureProperty /api/2/featurehasfeatureproperties GET, POST, PUT, DELETE FeatureProperty /api/2/featureproperties GET, POST, PUT, DELETE Feature /api/2/features GET, POST, PUT, DELETE Organizations /api/2/organizations GET, POST, PUT, DELETE QuotationLine /api/2/quotationlines GET, POST, PUT, DELETE QuotationProperty /api/2/quotationproperties GET, POST, PUT, DELETE Quotation /api/2/quotations GET, POST, PUT, DELETE UnitOfMeasurement /api/2/uom GET, POST, PUT, DELETE VAT /api/2/vats GET, POST, PUT, DELETE Additional note about GET: If the endpoint is requested without an ID, a list of all the entities will be returned. If an ID is specified, a single entity is returned. It is also possible to use query parameters when retrieving a list of entities: Name Type Description Example Skip integer Specifies how many entities should be skipped in the result. GET /api/2/quotations?skip=10&limit=100 Limit integer Specifies how many entities you want to retrieve. GET /api/2/quotations?skip=10&limit=100 Orderby string Used to order the result based on a property of the entity. GET /api/2/features?orderby=name Descending boolean By default the Orderby parameter orders the result in ascending order. If you want to retrieve the result in descending order you need to specify the descending parameter. GET /api/2/features?orderby=name&descending=true Include string All non-native types are by default excluded from the API response. If you require them you have to specify this in the request. Note: Include values should be formatted in CamelCase. GET /api/2/quotations?include=Lines Will return all the lines of the corresponding quotations. You can add multiple include parameters to suffice all your requirements: GET /api/2/quotations?include=Lines&include=Debtor&include=Seller Filter string Besides the native query parameters above; it is also possible to query on entity specific properties. For example; if you want to retrieve a list of all quotations that have the synced property set to true you can use the url: /api/2/quotations?synced=true . Where synced is a property of the quotation model. Additional note about POST/PUT: These methods support a single entity as well as a list of entities. Based on the provided entities the method for a single or bulk will be picked automatically.","title":"Basic endpoints"},{"location":"api/start/","text":"Requirements To follow this guide, it is advised to have Google Crome and Postman installed. The examples will show how to the raw HTTP requests with Postman. Postman can be downloaded from their website . The getting started guide contains the following content: Requesting an access token Creating a request and attaching the access token. Examples in C# and Python. Authentication Adding an integration application Open your EMS environment . In the navigation menu open Integrations . Add a new integration application by clicking the add button in the bottom-right corner. Add an Elfskot Connect application. Copy the ApplicationId and Secret and store them in a safe place. Retrieving an access token To make requests to our API, you will first need to request an access token. To request an access token, make a HTTP request to the API with the following parameters: URI: POST https://api.elfskot.cloud/api/2/auth/elfskotconnectlogin Content-type: application/json Body: { \"clientId\": \"2313449e-b71a-4abd-b3df-934eec91712e\", \"secret\": \"cbg7cult\" } When the request is submitted, and all the parameters are correct, the API will return an access token: { \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJqdGkiOiI3Y2JhNTY4MC03MTA5LTQ4Y2QtOWIzMi0zZTBjMzVlODA2ODciLCJpYXQiOjE1MzkzMzIxMDYsInRlbmFudGlkIjoiYTRlY2U3OWYtZjZmMC00YzgwLTljYmEtMDhkNGFkMGQ4NTRmIiwib3JnYW5pemF0aW9uaWQiOiIiLCJpc0VsZnNrb3RDb25uZWN0IjoiVHJ1ZSIsIm5iZiI6MTUzOTMzMjEwNiwiZXhwIjoxNTM5MzMzOTA2LCJpc3MiOiJodHRwczovL2FwaS5lbGZza290LmNsb3VkLyIsImF1ZCI6Imh0dHBzOi8vYXBpLmVsZnNrb3QuY2xvdWQvIn0.lqVHiSG7wZkmFtuuRY5n3S_sGYazHYdD8HMokRL7Lf0\", \"expiresIn\": 1800000 } An example of how this is done in Postman, is shown below: Error responses If the API gives a 415 Unsupported Media Type error, make sure that the content type of the request is set to application/json . In the case of a not authorized error, make sure that you have added the integration application, and that the clientId and secret are correct. Creating a request Now we can use the access token to authenticate with the Elfskot API. For any requests to the API, the access token should be added to the HTTP Authorization request header. An example is shown below where we retrieve a list of features: URI: GET https://api.elfskot.cloud/api/2/features Headers: Key Value Authorization bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... A Postman example which retrieves all the features is shown below: Example (C#): Requesting an access token The following C# example demonstrates how to retrieve an access token from the API: // Retrieves an access token from the API. This requires an integration application in // the Elfskot Management System. See http://docs.elfskot.com for more information. string RequestAccessToken(string applicationId, string secret) { using(var client = new HttpClient()) { var body = JsonConvert.SerializeObject(new { clientId = applicationId, secret = secret }); var request = new HttpRequestMessage(HttpMethod.Post, \"https://api.elfskot.cloud/api/2/auth/elfskotconnectlogin\"); request.Content = new StringContent(body, Encoding.UTF8, \"application/json\"); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { Console.WriteLine(\"Successfully retrieved an access token.\"); return JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result).accessToken; } else { throw new HttpRequestException($\"Failed to request access token, server responded with status code: {response.StatusCode}\"); } } } This access token should present in the HTTP Authorization request header for every request.","title":"Getting started"},{"location":"api/start/#requirements","text":"To follow this guide, it is advised to have Google Crome and Postman installed. The examples will show how to the raw HTTP requests with Postman. Postman can be downloaded from their website . The getting started guide contains the following content: Requesting an access token Creating a request and attaching the access token. Examples in C# and Python.","title":"Requirements"},{"location":"api/start/#authentication","text":"","title":"Authentication"},{"location":"api/start/#adding-an-integration-application","text":"Open your EMS environment . In the navigation menu open Integrations . Add a new integration application by clicking the add button in the bottom-right corner. Add an Elfskot Connect application. Copy the ApplicationId and Secret and store them in a safe place.","title":"Adding an integration application"},{"location":"api/start/#retrieving-an-access-token","text":"To make requests to our API, you will first need to request an access token. To request an access token, make a HTTP request to the API with the following parameters: URI: POST https://api.elfskot.cloud/api/2/auth/elfskotconnectlogin Content-type: application/json Body: { \"clientId\": \"2313449e-b71a-4abd-b3df-934eec91712e\", \"secret\": \"cbg7cult\" } When the request is submitted, and all the parameters are correct, the API will return an access token: { \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJqdGkiOiI3Y2JhNTY4MC03MTA5LTQ4Y2QtOWIzMi0zZTBjMzVlODA2ODciLCJpYXQiOjE1MzkzMzIxMDYsInRlbmFudGlkIjoiYTRlY2U3OWYtZjZmMC00YzgwLTljYmEtMDhkNGFkMGQ4NTRmIiwib3JnYW5pemF0aW9uaWQiOiIiLCJpc0VsZnNrb3RDb25uZWN0IjoiVHJ1ZSIsIm5iZiI6MTUzOTMzMjEwNiwiZXhwIjoxNTM5MzMzOTA2LCJpc3MiOiJodHRwczovL2FwaS5lbGZza290LmNsb3VkLyIsImF1ZCI6Imh0dHBzOi8vYXBpLmVsZnNrb3QuY2xvdWQvIn0.lqVHiSG7wZkmFtuuRY5n3S_sGYazHYdD8HMokRL7Lf0\", \"expiresIn\": 1800000 } An example of how this is done in Postman, is shown below:","title":"Retrieving an access token"},{"location":"api/start/#error-responses","text":"If the API gives a 415 Unsupported Media Type error, make sure that the content type of the request is set to application/json . In the case of a not authorized error, make sure that you have added the integration application, and that the clientId and secret are correct.","title":"Error responses"},{"location":"api/start/#creating-a-request","text":"Now we can use the access token to authenticate with the Elfskot API. For any requests to the API, the access token should be added to the HTTP Authorization request header. An example is shown below where we retrieve a list of features: URI: GET https://api.elfskot.cloud/api/2/features Headers: Key Value Authorization bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... A Postman example which retrieves all the features is shown below:","title":"Creating a request"},{"location":"api/start/#example-c-requesting-an-access-token","text":"The following C# example demonstrates how to retrieve an access token from the API: // Retrieves an access token from the API. This requires an integration application in // the Elfskot Management System. See http://docs.elfskot.com for more information. string RequestAccessToken(string applicationId, string secret) { using(var client = new HttpClient()) { var body = JsonConvert.SerializeObject(new { clientId = applicationId, secret = secret }); var request = new HttpRequestMessage(HttpMethod.Post, \"https://api.elfskot.cloud/api/2/auth/elfskotconnectlogin\"); request.Content = new StringContent(body, Encoding.UTF8, \"application/json\"); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { Console.WriteLine(\"Successfully retrieved an access token.\"); return JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result).accessToken; } else { throw new HttpRequestException($\"Failed to request access token, server responded with status code: {response.StatusCode}\"); } } } This access token should present in the HTTP Authorization request header for every request.","title":"Example (C#): Requesting an access token"},{"location":"api/tutorial/applicationevents/","text":"Application events This tutorial describes how a integration application can act on different events that occur in the Elfskot product configurator. As of this writing there are 3 application events exposed through the API: Name Description QuotationRequested Event is emitted when a quotation is requested either through the configurator or order entry(EMS). QuotationToPending This event is emitted when a quotation's status is set to Pending. QuotationToAccepted This event is emitted when a quotation's status is set to Accepted. See /models/#application-events for information about application event models.","title":"Tutorial: Application Events"},{"location":"api/tutorial/applicationevents/#application-events","text":"This tutorial describes how a integration application can act on different events that occur in the Elfskot product configurator. As of this writing there are 3 application events exposed through the API: Name Description QuotationRequested Event is emitted when a quotation is requested either through the configurator or order entry(EMS). QuotationToPending This event is emitted when a quotation's status is set to Pending. QuotationToAccepted This event is emitted when a quotation's status is set to Accepted. See /models/#application-events for information about application event models.","title":"Application events"},{"location":"api/tutorial/features/","text":"Introduction In this tutorial we will show how you can manage features. The examples will show the following: How to retrieve a list of features. How to create a new feature. How to retrieve a single feature. How to update a feature. How to delete a feature. There is also a complete project available for download . This project contains example code that will show how to accomplish the above described tasks. If you do not know how to connect to the API, please check out the getting started with the API first. Retrieving an access token The following C# function will retrieve an access token from the API. // Retrieves an access token from the API. This requires an integration application in // the Elfskot Management System. See http://docs.elfskot.com for more information. static string RequestAccessToken(string applicationId, string secret) { using(var client = new HttpClient()) { var body = JsonConvert.SerializeObject(new { clientId = applicationId, secret = secret }); var request = new HttpRequestMessage(HttpMethod.Post, \"https://api.elfskot.cloud/api/2/auth/elfskotconnectlogin\"); request.Content = new StringContent(body, Encoding.UTF8, \"application/json\"); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { Console.WriteLine(\"Successfully retrieved an access token.\"); return JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result).accessToken; } else { throw new HttpRequestException($\"Failed to request access token, server responded with status code: {response.StatusCode}\"); } } } The access token should be included in every request. Retrieving a list of features To request all the features, we will call the following endpoint: https://api.elfskot.cloud/api/2/features?include=Texts&skip=0&take=5 . // Retrieve a list of all features. static void RetrieveAllFeatures(string token) { using(var client = new HttpClient()) { // Appending ?include=Texts will have the API to include the texts. You can also use skip/take to filter. // All the filter parameters are optional. See http://docs.elfskot.com for more information about filtering options. var request = new HttpRequestMessage(HttpMethod.Get, \"https://api.elfskot.cloud/api/2/features?include=Texts&skip=0&take=5\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if(response.IsSuccessStatusCode) { var features = JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result); Console.WriteLine($\"Retrieved {features.Count} features.\"); Console.WriteLine(features.First); // We can also loop through all the retrieved features. //foreach(var feature in features) //{ // Console.WriteLine(feature.name); //} } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } } Creating a new feature To create a new feature, we first need to create a JSON object. This example creates an anonymous object which is converted to a JSON object. It is possible to include multiple layers of objects, i.e. the feature and the texts can be created in a single request. All the languages are already available in the API, as defined in ISO 639-1. Simply fill the languageIso with the two letter ISO. The API will return the created model at the end of the request. This contains the assigned ID which can be used later. // Creates a new feature in your Elfskot Management System, and // returns the ID of the newly created feature. static object CreateFeature(string token) { // This object is serialized to a JSON string, see the raw HTTP content // to see what the request looks like. var feature = new { name = \"Example feature\", articleCode = \"CODE-123\", salesPrice = 1000m, packingUnit = 1, texts = new List<object>() { new { languageIso = \"en\", // 2-letter ISO code, all the languages are already there. type = 0, // Description value = \"Example feature description\" }, new { languageIso = \"en\", type = 1, // Extended description value = \"Example feature extended description\" }, new { languageIso = \"en\", type = 2, // More info value = \"Example feature more info\" } }, cardImageUrl = \"https://www.elfskot.com/wp-content/themes/elfskot/dist/svg/logo-elfskot.svg\" }; using (var client = new HttpClient()) { var request = new HttpRequestMessage(HttpMethod.Post, \"https://api.elfskot.cloud/api/2/features\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); request.Content = new StringContent(JsonConvert.SerializeObject(feature), Encoding.UTF8, \"application/json\"); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { // The entire feature is stored in 'result'. var result = JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result); Console.WriteLine($\"Successfully created new feature with id: {result.id}\"); return result; } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } } Retrieve a single feature To retrieve a single feature, call the endpoint https://api.elfskot.cloud/api/2/features/{id}?include=Texts with the ID of the feature. If you want additional properties, such as texts, they need to be included seperately. If a property is null , you probably need to include this in the request. // Retrieve a single feature by ID. static object RetrieveFeatureById(string token, string id) { using (var client = new HttpClient()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage(HttpMethod.Get, $\"https://api.elfskot.cloud/api/2/features/{id}?include=Texts\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { var content = response.Content.ReadAsStringAsync().Result; var feature = JsonConvert.DeserializeObject<dynamic>(content); Console.WriteLine(feature); return feature; } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } } Update an existing feature Updating an existing feature is almost identical to creating a new feature. Send the feature object to the API with the HTTP PUT method. The API will return the updated feature object. // Updates a feature. static void UpdateFeature(string token, dynamic feature) { using (var client = new HttpClient()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage(HttpMethod.Put, $\"https://api.elfskot.cloud/api/2/features\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); request.Content = new StringContent(JsonConvert.SerializeObject(feature), Encoding.UTF8, \"application/json\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { var content = response.Content.ReadAsStringAsync().Result; var result = JsonConvert.DeserializeObject<dynamic>(content); Console.WriteLine(result); } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } } Delete a feature To delete a feature, we call the following endpoint https://api.elfskot.cloud/api/2/features/{id} , where the id is the ID of the feature to be deleted. Be aware that if a feature is deleted, it will also be removed from all existing feature models. // Deletes a feature. static void DeleteFeature(string token, string id) { using (var client = new HttpClient()) { var request = new HttpRequestMessage(HttpMethod.Delete, $\"https://api.elfskot.cloud/api/2/features/{id}\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { Console.WriteLine(\"Feature has been successfully deleted.\"); } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } }","title":"Tutorial: Features"},{"location":"api/tutorial/features/#introduction","text":"In this tutorial we will show how you can manage features. The examples will show the following: How to retrieve a list of features. How to create a new feature. How to retrieve a single feature. How to update a feature. How to delete a feature. There is also a complete project available for download . This project contains example code that will show how to accomplish the above described tasks. If you do not know how to connect to the API, please check out the getting started with the API first.","title":"Introduction"},{"location":"api/tutorial/features/#retrieving-an-access-token","text":"The following C# function will retrieve an access token from the API. // Retrieves an access token from the API. This requires an integration application in // the Elfskot Management System. See http://docs.elfskot.com for more information. static string RequestAccessToken(string applicationId, string secret) { using(var client = new HttpClient()) { var body = JsonConvert.SerializeObject(new { clientId = applicationId, secret = secret }); var request = new HttpRequestMessage(HttpMethod.Post, \"https://api.elfskot.cloud/api/2/auth/elfskotconnectlogin\"); request.Content = new StringContent(body, Encoding.UTF8, \"application/json\"); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { Console.WriteLine(\"Successfully retrieved an access token.\"); return JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result).accessToken; } else { throw new HttpRequestException($\"Failed to request access token, server responded with status code: {response.StatusCode}\"); } } } The access token should be included in every request.","title":"Retrieving an access token"},{"location":"api/tutorial/features/#retrieving-a-list-of-features","text":"To request all the features, we will call the following endpoint: https://api.elfskot.cloud/api/2/features?include=Texts&skip=0&take=5 . // Retrieve a list of all features. static void RetrieveAllFeatures(string token) { using(var client = new HttpClient()) { // Appending ?include=Texts will have the API to include the texts. You can also use skip/take to filter. // All the filter parameters are optional. See http://docs.elfskot.com for more information about filtering options. var request = new HttpRequestMessage(HttpMethod.Get, \"https://api.elfskot.cloud/api/2/features?include=Texts&skip=0&take=5\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if(response.IsSuccessStatusCode) { var features = JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result); Console.WriteLine($\"Retrieved {features.Count} features.\"); Console.WriteLine(features.First); // We can also loop through all the retrieved features. //foreach(var feature in features) //{ // Console.WriteLine(feature.name); //} } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } }","title":"Retrieving a list of features"},{"location":"api/tutorial/features/#creating-a-new-feature","text":"To create a new feature, we first need to create a JSON object. This example creates an anonymous object which is converted to a JSON object. It is possible to include multiple layers of objects, i.e. the feature and the texts can be created in a single request. All the languages are already available in the API, as defined in ISO 639-1. Simply fill the languageIso with the two letter ISO. The API will return the created model at the end of the request. This contains the assigned ID which can be used later. // Creates a new feature in your Elfskot Management System, and // returns the ID of the newly created feature. static object CreateFeature(string token) { // This object is serialized to a JSON string, see the raw HTTP content // to see what the request looks like. var feature = new { name = \"Example feature\", articleCode = \"CODE-123\", salesPrice = 1000m, packingUnit = 1, texts = new List<object>() { new { languageIso = \"en\", // 2-letter ISO code, all the languages are already there. type = 0, // Description value = \"Example feature description\" }, new { languageIso = \"en\", type = 1, // Extended description value = \"Example feature extended description\" }, new { languageIso = \"en\", type = 2, // More info value = \"Example feature more info\" } }, cardImageUrl = \"https://www.elfskot.com/wp-content/themes/elfskot/dist/svg/logo-elfskot.svg\" }; using (var client = new HttpClient()) { var request = new HttpRequestMessage(HttpMethod.Post, \"https://api.elfskot.cloud/api/2/features\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); request.Content = new StringContent(JsonConvert.SerializeObject(feature), Encoding.UTF8, \"application/json\"); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { // The entire feature is stored in 'result'. var result = JsonConvert.DeserializeObject<dynamic>(response.Content.ReadAsStringAsync().Result); Console.WriteLine($\"Successfully created new feature with id: {result.id}\"); return result; } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } }","title":"Creating a new feature"},{"location":"api/tutorial/features/#retrieve-a-single-feature","text":"To retrieve a single feature, call the endpoint https://api.elfskot.cloud/api/2/features/{id}?include=Texts with the ID of the feature. If you want additional properties, such as texts, they need to be included seperately. If a property is null , you probably need to include this in the request. // Retrieve a single feature by ID. static object RetrieveFeatureById(string token, string id) { using (var client = new HttpClient()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage(HttpMethod.Get, $\"https://api.elfskot.cloud/api/2/features/{id}?include=Texts\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { var content = response.Content.ReadAsStringAsync().Result; var feature = JsonConvert.DeserializeObject<dynamic>(content); Console.WriteLine(feature); return feature; } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } }","title":"Retrieve a single feature"},{"location":"api/tutorial/features/#update-an-existing-feature","text":"Updating an existing feature is almost identical to creating a new feature. Send the feature object to the API with the HTTP PUT method. The API will return the updated feature object. // Updates a feature. static void UpdateFeature(string token, dynamic feature) { using (var client = new HttpClient()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage(HttpMethod.Put, $\"https://api.elfskot.cloud/api/2/features\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); request.Content = new StringContent(JsonConvert.SerializeObject(feature), Encoding.UTF8, \"application/json\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { var content = response.Content.ReadAsStringAsync().Result; var result = JsonConvert.DeserializeObject<dynamic>(content); Console.WriteLine(result); } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } }","title":"Update an existing feature"},{"location":"api/tutorial/features/#delete-a-feature","text":"To delete a feature, we call the following endpoint https://api.elfskot.cloud/api/2/features/{id} , where the id is the ID of the feature to be deleted. Be aware that if a feature is deleted, it will also be removed from all existing feature models. // Deletes a feature. static void DeleteFeature(string token, string id) { using (var client = new HttpClient()) { var request = new HttpRequestMessage(HttpMethod.Delete, $\"https://api.elfskot.cloud/api/2/features/{id}\"); request.Headers.Add(\"Authorization\", $\"bearer {token}\"); PrintHTTPRequest(request); var response = client.SendAsync(request).Result; if (response.IsSuccessStatusCode) { Console.WriteLine(\"Feature has been successfully deleted.\"); } else { throw new HttpRequestException($\"Failed HTTP request, server responded with status code: {response.StatusCode}\"); } } }","title":"Delete a feature"}]}