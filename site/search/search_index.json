{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Elfsquad API allows you to integrate your applications with the Elfsquad services. The Elfsquad API is available at https://api.elfsquad.io. Authentication See the Authentication page for information about authentication. Available APIs Data API Configurator API EMS API","title":"Introduction"},{"location":"#authentication","text":"See the Authentication page for information about authentication.","title":"Authentication"},{"location":"#available-apis","text":"Data API Configurator API EMS API","title":"Available APIs"},{"location":"authentication/","text":"There are three ways to authenticate with the Elfsquad API. Anonymous - for creating custom configurator implements where users are not required to log in. Client Credentials authentication - for creating data intgegrations. User authentication - for creating custom configurator implements where users are required to log in. Anonymous When creating a custom configurator implementation in which you want to allow anonymous users, you can use this authentication method. The anonymous authentication method only allows calling endpoints in the configurator API . Authentication to the API can be performed via a custom HTTP header: x-elfsquad-id: {TENANT_ID} The Tenant ID can be found at the bottom of the submenu in the integrations page . Client Credentials For integration flows that do not require requests that are issued by a user, you can use this authentication method. For example when creating automation tooling and data integrations. The client credentials authentication method can be used in all available APIs. Step by step tutorial User authentication For integration flows that require requests that are issued by a user, you can use this authentication method. For example when creating a custom showroom that requires the user to be logged in. The user authentication method can be used in all available APIs. Step by step tutorial","title":"Authentication"},{"location":"authentication/#anonymous","text":"When creating a custom configurator implementation in which you want to allow anonymous users, you can use this authentication method. The anonymous authentication method only allows calling endpoints in the configurator API . Authentication to the API can be performed via a custom HTTP header: x-elfsquad-id: {TENANT_ID} The Tenant ID can be found at the bottom of the submenu in the integrations page .","title":"Anonymous"},{"location":"authentication/#client-credentials","text":"For integration flows that do not require requests that are issued by a user, you can use this authentication method. For example when creating automation tooling and data integrations. The client credentials authentication method can be used in all available APIs. Step by step tutorial","title":"Client Credentials"},{"location":"authentication/#user-authentication","text":"For integration flows that require requests that are issued by a user, you can use this authentication method. For example when creating a custom showroom that requires the user to be logged in. The user authentication method can be used in all available APIs. Step by step tutorial","title":"User authentication"},{"location":"apis/apiv2/","text":"WARNING: This API should not be used for new integrations. Versions Current version: 2 API Specification Open API Specification","title":"Apiv2"},{"location":"apis/apiv2/#versions","text":"Current version: 2","title":"Versions"},{"location":"apis/apiv2/#api-specification","text":"Open API Specification","title":"API Specification"},{"location":"apis/configurator/","text":"The Elfsquad Configurator API enables retrieve, create and update configurations. Example use-cases: Update existing configurations Build your own custom configurator interface Generate PDF documents of a configuration The API is available at https://api.elfsquad.io/configurator/1/ . Versions Current version: 1 API Specification Open in new tab","title":"Configurator API"},{"location":"apis/configurator/#versions","text":"Current version: 1","title":"Versions"},{"location":"apis/configurator/#api-specification","text":"Open in new tab","title":"API Specification"},{"location":"apis/data/","text":"The Elfsquad Data API enables you to query and manipulate plain data through an API call. No business logic or events will be triggered when making changes through this API. This API implements the OData specification which can be used to specify filters etc. Example use-cases: Populate a business intelligence dashboard Edit a quotation status without triggering any logic/events Synchonise data with third party applications such as ERP and CAD The Elfsquad Excel plugin uses this API to query and change data The API is available at https://api.elfsquad.io/data/1/ . Versions Current version: 1 API Specification Open in new tab","title":"Data API"},{"location":"apis/data/#versions","text":"Current version: 1","title":"Versions"},{"location":"apis/data/#api-specification","text":"Open in new tab","title":"API Specification"},{"location":"apis/quotations/","text":"","title":"Quotations"},{"location":"authentication/client-credentials-authentication/","text":"Before You Begin Create a new OpenId client integration page in the Integrations page and note your Client id and Secret. Step 1: Use your Client ID and Secret to obtain an access token Replace the {CLIENT_ID} and {CLIENT_SECRET} values in the example below with those specific to your OpenId Client. Code examples HTTP POST /connect/token HTTP / 1.1 Host : login.elfsquad.io Content-Type : application/x-www-form-urlencoded client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&grant_type=client_credentials&scope=Elfskot.Api cURL curl --location --request POST 'https://login.elfsquad.io/connect/token' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'client_id={CLIENT_ID}' \\ --data-urlencode 'client_secret={CLIENT_SECRET}' \\ --data-urlencode 'grant_type=client_credentials' \\ --data-urlencode 'scope=Elfskot.Api' C# - RestSharp var client = new RestClient ( \"https://login.elfsquad.io/connect/token\" ); client . Timeout = - 1 ; var request = new RestRequest ( Method . POST ); request . AddHeader ( \"Content-Type\" , \"application/x-www-form-urlencoded\" ); request . AddParameter ( \"client_id\" , \"{CLIENT_ID}\" ); request . AddParameter ( \"client_secret\" , \"{CLIENT_SECRET}\" ); request . AddParameter ( \"grant_type\" , \"client_credentials\" ); request . AddParameter ( \"scope\" , \"Elfskot.Api\" ); IRestResponse response = client . Execute ( request ); Console . WriteLine ( response . Content ); Step 2: Retrieve the access token from the response A successful response will look like this: { \"access_token\" : \"{ACCESS_TOKEN}\" , \"expires_in\" : 3600 , \"token_type\" : \"Bearer\" , \"scope\" : \"Elfskot.Api\" } Step 3: Use the access token to access Elfsquad APIs You can now use the access token to make calls to one of the Elfsquad APIs until the token expires. Code examples HTTP GET /data/1/features HTTP / 1.1 Host : api.elfsquad.io Authorization : Bearer {ACCESS_TOKEN} cURL curl --location --request GET 'https://api.elfsquad.io/data/1/features' \\ --header 'Authorization: Bearer {ACCESS_TOKEN}' C# - RestSharp var client = new RestClient ( \"https://api.elfsquad.io/data/1/features\" ); client . Timeout = - 1 ; var request = new RestRequest ( Method . GET ); request . AddHeader ( \"Authorization\" , \"Bearer {ACCESS_TOKEN}\" ); IRestResponse response = client . Execute ( request ); Console . WriteLine ( response . Content );","title":"Client credentials authentication"},{"location":"authentication/client-credentials-authentication/#before-you-begin","text":"Create a new OpenId client integration page in the Integrations page and note your Client id and Secret.","title":"Before You Begin"},{"location":"authentication/client-credentials-authentication/#step-1-use-your-client-id-and-secret-to-obtain-an-access-token","text":"Replace the {CLIENT_ID} and {CLIENT_SECRET} values in the example below with those specific to your OpenId Client. Code examples HTTP POST /connect/token HTTP / 1.1 Host : login.elfsquad.io Content-Type : application/x-www-form-urlencoded client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&grant_type=client_credentials&scope=Elfskot.Api cURL curl --location --request POST 'https://login.elfsquad.io/connect/token' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'client_id={CLIENT_ID}' \\ --data-urlencode 'client_secret={CLIENT_SECRET}' \\ --data-urlencode 'grant_type=client_credentials' \\ --data-urlencode 'scope=Elfskot.Api' C# - RestSharp var client = new RestClient ( \"https://login.elfsquad.io/connect/token\" ); client . Timeout = - 1 ; var request = new RestRequest ( Method . POST ); request . AddHeader ( \"Content-Type\" , \"application/x-www-form-urlencoded\" ); request . AddParameter ( \"client_id\" , \"{CLIENT_ID}\" ); request . AddParameter ( \"client_secret\" , \"{CLIENT_SECRET}\" ); request . AddParameter ( \"grant_type\" , \"client_credentials\" ); request . AddParameter ( \"scope\" , \"Elfskot.Api\" ); IRestResponse response = client . Execute ( request ); Console . WriteLine ( response . Content );","title":"Step 1: Use your Client ID and Secret to obtain an access token"},{"location":"authentication/client-credentials-authentication/#step-2-retrieve-the-access-token-from-the-response","text":"A successful response will look like this: { \"access_token\" : \"{ACCESS_TOKEN}\" , \"expires_in\" : 3600 , \"token_type\" : \"Bearer\" , \"scope\" : \"Elfskot.Api\" }","title":"Step 2: Retrieve the access token from the response"},{"location":"authentication/client-credentials-authentication/#step-3-use-the-access-token-to-access-elfsquad-apis","text":"You can now use the access token to make calls to one of the Elfsquad APIs until the token expires. Code examples HTTP GET /data/1/features HTTP / 1.1 Host : api.elfsquad.io Authorization : Bearer {ACCESS_TOKEN} cURL curl --location --request GET 'https://api.elfsquad.io/data/1/features' \\ --header 'Authorization: Bearer {ACCESS_TOKEN}' C# - RestSharp var client = new RestClient ( \"https://api.elfsquad.io/data/1/features\" ); client . Timeout = - 1 ; var request = new RestRequest ( Method . GET ); request . AddHeader ( \"Authorization\" , \"Bearer {ACCESS_TOKEN}\" ); IRestResponse response = client . Execute ( request ); Console . WriteLine ( response . Content );","title":"Step 3: Use the access token to access Elfsquad APIs"},{"location":"authentication/user-authentication/","text":"Before You Begin Create a new OpenId client integration page in the Integrations page . When done succesfully, a newly created integration should show up. Open the settings of the newly created integration. Note your client id. Enter a redirect url. The end user will be redirected to this url after a succesfull login. Step 1: Direct the end user to the Elfsquad authentication page At some point in the UI of your app, you will need to get the end user to log in, in order to gain consent to access Elfsquad's resources on the end user\u2019s behalf. You can do this when the end user opens the app, or you may wait until your app actually needs to access Elfsquad's resources. In either case, you will redirect the end user to the GET connect/authorize endpoint in their browser. For example, you could do this by providing a link for the end user: <a href=\"https://login.elfsquad.io/connect/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URL}&response_type=token&scope=Elfskot.Api\">Click here to login</a> Replace the {CLIENT_ID} and {REDIRECT_URL} values in the example below with those specific to your OpenId Client. Clicking on the link will take the end user to the Elfsquad login page. After the end user has succesfully logged in with valid credentials, the end user will be redirected back to your redirect url with the access token included as a fragment of the URL. Step 2: Extracting the access token For example, let's say our redirect url is https://myapp.com/callback. When this is the case, the user will be redirected to https://myapp.com/callback#access_token=eyabcdefghijk12345678&token_type=Bearer&expires_in=3600 after a succesfull login. Now all that is left, is to extract the access token (eyabcdefghijk12345678) from this url. One example of how to do this, would be to serve a web page with some javascript at the redirect url: Javascript example HTML < html > < body > < script > let token = window . location . hash . match ( /\\#(?:access_token)\\=([\\S\\s]*?)\\&/ )[ 1 ]; alert ( \"your access token is : \" + token ); </ script > </ body > </ html > Your app will now be able to use this token to make calls to the Elfsquad API's on the end users behalf.","title":"User authentication"},{"location":"authentication/user-authentication/#before-you-begin","text":"Create a new OpenId client integration page in the Integrations page . When done succesfully, a newly created integration should show up. Open the settings of the newly created integration. Note your client id. Enter a redirect url. The end user will be redirected to this url after a succesfull login.","title":"Before You Begin"},{"location":"authentication/user-authentication/#step-1-direct-the-end-user-to-the-elfsquad-authentication-page","text":"At some point in the UI of your app, you will need to get the end user to log in, in order to gain consent to access Elfsquad's resources on the end user\u2019s behalf. You can do this when the end user opens the app, or you may wait until your app actually needs to access Elfsquad's resources. In either case, you will redirect the end user to the GET connect/authorize endpoint in their browser. For example, you could do this by providing a link for the end user: <a href=\"https://login.elfsquad.io/connect/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URL}&response_type=token&scope=Elfskot.Api\">Click here to login</a> Replace the {CLIENT_ID} and {REDIRECT_URL} values in the example below with those specific to your OpenId Client. Clicking on the link will take the end user to the Elfsquad login page. After the end user has succesfully logged in with valid credentials, the end user will be redirected back to your redirect url with the access token included as a fragment of the URL.","title":"Step 1: Direct the end user to the Elfsquad authentication page"},{"location":"authentication/user-authentication/#step-2-extracting-the-access-token","text":"For example, let's say our redirect url is https://myapp.com/callback. When this is the case, the user will be redirected to https://myapp.com/callback#access_token=eyabcdefghijk12345678&token_type=Bearer&expires_in=3600 after a succesfull login. Now all that is left, is to extract the access token (eyabcdefghijk12345678) from this url. One example of how to do this, would be to serve a web page with some javascript at the redirect url: Javascript example HTML < html > < body > < script > let token = window . location . hash . match ( /\\#(?:access_token)\\=([\\S\\s]*?)\\&/ )[ 1 ]; alert ( \"your access token is : \" + token ); </ script > </ body > </ html > Your app will now be able to use this token to make calls to the Elfsquad API's on the end users behalf.","title":"Step 2: Extracting the access token"},{"location":"ems/","text":"Welcome to Elfsquad Docs Elfsquad provides two methods to integrate with our services. To get an impression of which data is available, see the models page . REST API Integrate or build your own application directly on our REST API. Integrating with our API gives more flexibility and control, but comes at the cost of being more complex to set up. If the integration is simple, e.g. syncing article data, it is recommended to use the SDK. For more information about our API, see the getting started with the API . SDK Elfsquad provides an easy way to integrate with our applications through our SDK. Our SDK has been developed in C#, and is available as a Nuget package . For more information about our SDK, see the getting started with the SDK . Custom configurator There are several ways to embed the custom-facing configurator onto your existing website. If the website is built using WordPress we provide a simple plugin that allows you to embed the configurator directly onto a page. For more information click here . You will also be able to create a new interface from scratch using our configuration endpoints. For more information see the Tutorial: custom configurator . Support If you are missing information, or need support, please reach out to us on support@elfsquad.io .","title":"Getting started"},{"location":"ems/#welcome-to-elfsquad-docs","text":"Elfsquad provides two methods to integrate with our services. To get an impression of which data is available, see the models page .","title":"Welcome to Elfsquad Docs"},{"location":"ems/#rest-api","text":"Integrate or build your own application directly on our REST API. Integrating with our API gives more flexibility and control, but comes at the cost of being more complex to set up. If the integration is simple, e.g. syncing article data, it is recommended to use the SDK. For more information about our API, see the getting started with the API .","title":"REST API"},{"location":"ems/#sdk","text":"Elfsquad provides an easy way to integrate with our applications through our SDK. Our SDK has been developed in C#, and is available as a Nuget package . For more information about our SDK, see the getting started with the SDK .","title":"SDK"},{"location":"ems/#custom-configurator","text":"There are several ways to embed the custom-facing configurator onto your existing website. If the website is built using WordPress we provide a simple plugin that allows you to embed the configurator directly onto a page. For more information click here . You will also be able to create a new interface from scratch using our configuration endpoints. For more information see the Tutorial: custom configurator .","title":"Custom configurator"},{"location":"ems/#support","text":"If you are missing information, or need support, please reach out to us on support@elfsquad.io .","title":"Support"},{"location":"ems/models/","text":"Models This page shows an overview of the available models. This list doesn't contain all the possible properties, but only the properties that are relevant. Application Events There are a number of application event types available through the API. See application event tutorials for more info. Name Type Description Id Guid Identifier of the application event. IntegrationApplicationId Guid Identifier of the integration application that should handle this application event. Handled bool Indicate whether this application event has been handled by the integration application defined by IntegrationApplicationId . HandledDate DateTime DateTime at which the application event was handled by the integration application. Success bool Defines whether the application event was handled successfully by the integration application. ReasonPhrase string Explanation of why the application event has the current success status. Besides the common application event properties, each type of application event has additional information available to it: QuotationRequested Name Type Description QuotationId Guid Identifier of the requested quotation. QuotationToPending Name Type Description QuotationId Guid Identifier of the quotation who's status is set to pending. QuotationToAccepted Name Type Description QuotationId Guid Identifier of the quotation who's status is set to accepted. QuotationVerified Name Type Description QuotationId Guid Identifier of the quotation that has been verified. Category Name Type Description Id Guid Identifier of the category. Name string Name of the category. Texts CategoryText[] Translated titles of the category. Subcategories Category[] Array of subcategories. ParentId Guid Identifier of the parent category. Order integer Order in which the category should be displayed in the different product selection pages. CategoryText Name Type Description Id Guid Identifier of the category text. Value string Value of the text. LanguageIso string Two letter ISO (639-1) code of the text language. CategoryId Guid Identifier of the category. Country Name Type Description Iso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. Name string Name of the country. Active bool EnglishName string Name of the country, in English. PhonePrefix string Phone prefix number, e.g. '+31' Capital string Capital city of the country CrmAccount Name Type Description Id Guid Identifier of the CRM account. Salutation string The salutation e.g. 'Dear sir/madam,' FullName string (Read-only) Full name of the account. FirstName string LastNamePrefix string The prefix of the lastName e.g. [FirstName] van der [LastName] LastName string CompanyName string Name of the company. Email string Phone1 string Primary phone number. Phone2 string Secondary phone number. StreetName string HouseNumber string PostalCode string City string CountryIso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. Country string Country e.g. 'United Kingdom' CocNumber string Chamber of Commerce number. VatNumber string Iban string Type integer Type of the CRM account. DefaultContact CrmContact The Default CrmContact DefaultContactId Guid Identifier for the DefaultContact Relationship type Key Description 0 Customer 1 Delivery address 2 Employee CrmContact Name Type Description Id Guid Identifier of the CRM contact. Salutation string The salutation e.g. 'Dear sir/madam,' FirstName string LastNamePrefix string The prefix of the last name e.g. [FirstName] van der [LastName]. LastName string CompanyName string The name of the company. Email string Phone1 string Primary phone number. Phone2 string Secondary phone number. StreetName string HouseNumber string PostalCode string City string UseParentAddress bool If this property is set; the contact should inherit it's company's address. CountryIso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. CrmAccountId Guid Identifier for the CrmAccount Currency Name Type Description Iso string Three letter ISO 4217:2015 code, e.g. 'EUR'. Name string Name of the curreny. Symbol string Symbol, e.g. '$'. DecimalDigits decimal Rounding decimal NamePlural string ExchangeRate Name Type Description Id guid Identifier for the ExchangeRate CurrencyIso string Three letter ISO 4217:2015 code, e.g. 'EUR'. Rate decimal Feature Every configuration model is based on features. Features are used to capture rich product information (texts, images, pricing). Once created, features can be categorized and implemented in product structures. Name Type Description Id Guid Identifier of the feature. Name string Name of the feature. ArticleCode string For reference purposes; e.g. the ERP item code. Type integer The type is 0 by default, and 2 if the feature should be displayed as a color picker in the configurator. SalesPrice decimal The sales price of the feature. MinValue decimal Minimal amount. Example: minimal width of a bed has to be 110 cm. A user cannot enter quantities below this minimal value. MaxValue decimal Maximum amount. Example: maximum width of a bed is 210 cm. A user cannot enter quantities higher than this maximum value. StepValue decimal The step amount that is taken into consideration (between min/ max values). Example: with a step value of 10 cm a user cannot select a width of 115cm. This will be rounded off to 120cm. PackingUnit decimal The amount that has to be taken into account when rounding up on the material list. Example: several lines of the same nuts are generated from the configurator to the quotation. This function sums-up all these lines and rounds it up to the packing unit quantity. Category Category Category of which this feature belongs to. CategoryId Guid Identifier for the category to which this feature is attached. SubcategoryIds Guid[] List of identifiers for sub-categories. ThreeDModelItems string[] The names of parts in a 3D model that are associated with this feature. HiddenThreeDModelItems string[] The names of parts in a 3D model that should be hidden when this feature is selected in a configuration. Tags string[] List of tags. A tag can be used to give a feature a certain label. MarginPct decimal Properties FeatureHasFeatureProperty[] Texts FeatureText[] CardImageUrl string URL for the image of the feature. This image is displayed in the cards. OrganizationSellsFeature OrganizationSellsFeature[] VATId Guid VAT that is used as default for this feature. UnitOfMeasurementId Guid Identifier of the Unit of measurement for this feature. UnitOfMeasurement UnitOfMeasurement Unit of measurement for this feature. FeatureType Key Description 0 Feature : Default type 2 ColorPicker : If used; the feature will be displayed as a color picker. 3 Text : If used; the feature will be displayed as a text input. FeatureText Name Type Description Id Guid Identifier of the feature text. LanguageIso string Two letter ISO (639-1) code of the text language. Type integer Type of the feature text. Value string Text value. FeatureId Guid Identifier of the feature. Feature text type Key Description 0 Descriptions : If used; the description will be shown instead of \u2018name\u2019. If left blank; the feature \u2018name\u2019 will be shown in the configurator. 1 Extended descriptions: If used; this text will be shown under the description/name in the configurator. 2 More info: If used; more info can be opened in the configurator. This information is showed in a screen-wide pop-up. 3 Title 4 PromptMessage 5 Quotation text: Optionally, this info can be generated on the quotation template (PDF). FeatureProperty Name Type Description Id Guid Identifier of the property. Name string Name of the property. Type integer Type of the property AssociatedFeatures AssociatedFeatureProperty[] If the type of this property is set to 1 (AssociatedFeatures) this property is filled with the relationships with features that can be associated with this property. FeaturePropertyType Key Description 0 Input : If the feature property is marked as a Input type; a decimal value can be associated with this property. 1 AssociatedFeatures : If the feature property is marked as a AssociatedFeatures type; a selection of defined features can be associated with this property. 2 Text : If the feature property is market as a Text type; a text value can be associated with this property. AssociatedFeatureProperty The AssociatedFeatureProperty is a relationship between a feature property's AssociatedFeatures list and a Feature. Name Type Description Id Guid Identifier of the associated feature property. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . Feature Feature The Feature object FeatureHasFeatureProperty Relationship between a feature and a feature property. Name Type Description Id Guid Identifier of the FeatureHasFeatureProperty relationship. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . Value decimal If the type of the FeaturePropery is set to 0 (Input); this property holds the input value. AssociatedFeatureId Guid If the type of the FeatureProperty is set to 1 (AssociatedFeature); this property holds the feature identifier that is associated with this property. LeaseTable Name Type Description CommencementPrice decimal TerminationPrice decimal Currency Currency ExchangeRate ExchangeRate LeaseTableLines List<LeaseTableLines> LeaseTableLine Name Type Description Id Guid Identifier of the LeaseTableLine. LeaseTableId Guid Identifier of the parent LeaseTable . MinValue decimal MaxValue decimal TermValue int TermType TermType Type of the lease term TermType A LeaseTableLine can have the following terms: Key Description 0 Days 1 Weeks 2 Months 3 Years Organization Name Type Description Id Guid Identifier of the organization. Name string Name of the organization. SettingsId Guid Identifier of the settings corresponding to this organization. Users User[] List of users that are part of this organization. DefaultDiscountPct decimal Organization's default discount percentage. Calculates the margin by decreasing the purchase price. DefaultUpValuePct decimal Organization's default up value percentage. Calculates the margin by increasing the sales price. VAT Name Type Description Id Guid Identifier of the VAT. Name string Describes the VAT. Pct decimal Percentage value of the VAT e.g. 21. IncludesVAT boolean Defines whether the price already includes VAT. Quotation Name Type Description Id Guid Identifier for the quotation. QuotationNumber int Unique quotation number that is used as a reference. VersionNumber int Version number of the quotation. Default is 1 . RevisionOfId Guid Identifier of the quotation on which this revision is based. Status integer The status of the quotation. IsExpired bool (Read-only) Returns true if the quotation is expired. StatusDescription string (Read-only) Returns the status of the quotation as a text. Example: Concept or Accepted Remarks string A field for remarks. Used to add notes to the quotation. Subject string The subject of the quotation. CustomerReference string Text field that can be used to idenfity the customer. QuotationReference string Text field that can be sued to identify the quotation. ExpiresDate DateTime Date when the state of the quotation is set to expired. DeliveryDate DateTime Date when the quotation is delivered. DebtorId Guid Identifier of the debtor, which is a CRM account . SellerId Guid Identifier of the seller, which is a CRM account . ShipToId Guid Identifier for the shipping address, which is a CRM account . Margin decimal The margin that is used on this quotation in percentages. Example: for 10% the value is 10 . Lines QuotationLine[] Quotation lines for the quotation. CurrencyIso string Two letter ISO (639-1) code of the currency. LanguageIso string Two letter ISO (639-1) code of the language. Files QuotationFile[] List of quotation files that are attached. TotalDiscountAmt decimal (Read-only) Total amount of discount on the total price. TotalDiscountPct decimal Total percentage of discount, e.g. 10 for 10%. SubTotalExclPrice decimal (Read-only) Subtotal price excluding VAT. SubTotalInclPrice decimal (Read-only) Subtotal including VAT. TotalExclPrice decimal (Read-only) Total price excluding VAT. TotalInclPrice decimal (Read-only) Total price including VAT. SubTotalMargin decimal (Read-only) Subtotal margin. TotalMargin decimal (Read-only) Total margin. TotalMarginDiscount decimal (Read-only) Total margin discount. SubTotalPurchasePrice decimal (Read-only) Subtotal purchase price. WholeSaleDiscountAmt decimal (Read-only) Wholesale discount amount. WholeSaleDiscountPct decimal (Read-only) Wholesale discount percentage. Properties QuotationPropertyValue[] Array containing the quotation property values for the quotation PropertyIds Guid[] Ids of selected quotation property fields QuotationStatus A quotation can have the following states: Key Description 0 Concept 1 Declined 2 Accepted 3 Expired 4 Revised 5 Pending 6 Order QuotationPropertyValue Name Type Description Id Guid Identifier for the quotation property value. EntityId Guid Identifier of the quotation this property value belongs to. EntityPropertyId Guid Identifier of the quotation property this property value belongs to. Value string Value of the quotation property QuotationLine Name Type Description QuotationId Guid Identifier of the quotation to which this line belongs. LineNumber int Indicates the sequence of the lines within one quotation. ArticleCode string For reference purposes, e.g. an ERP item code. CardImageUrl string URL to the image for the feature. Description string (Read-only) Description of the feature. ExtendedDescription string (Read-only) Extended description of the feature. MoreInfo string (Read-only) More info of the feature. QuotationText string (Read-only) Quotation text of the feature. FeatureId Guid Identifier of the feature. QuantityAmount decimal Quantity of the feature on this line. Quantity string (Read-only) Number formatted quantity, e.g. 100.14 . UnitOfMeasurement string (Read-only) Unit of measurement of the feature. Default is pcs . Hidden bool Indicates if the line is visible in EMS. ParentLineId Guid Identifier of the parent line (QuotationLine). GroupedRootLine bool Indicates if the quotation line is the root of a group of lines. GroupId Guid Identifier of the group to which this line belongs. GroupOrder int Indicates the order in which the groups are displayed. AddedFromConfiguration bool Indicates that the line has been added from a configuration. ConfigurationId Guid Identifier of the configuration from which this quotation line was created. DiscountPct decimal Discount percentage, e.g. 10 . MarginPct decimal (Read-only) Margin percentage. GroupDiscountPct decimal Discount percentage on the group, e.g. 10 . TotalExclPrice decimal (Read-only) Total price of the quotation line excluding VAT. TotalExclPriceExclDiscount decimal (Read-only) Total price of the quotation excluding VAT and discount. TotalInclPrice decimal (Read-only) Total price including VAT. GroupBaseExclPrice decimal (Read-only) GroupBaseInclPrice decimal (Read-only) GroupAdditionalExclPrice decimal (Read-only) GroupAdditionalInclPrice decimal (Read-only) GroupTotalExclPrice decimal (Read-only) GroupTotalInclPrice decimal (Read-only) DefaultPurchasePriceDiscountPct decimal (Read-only) PurchasePrice decimal (Read-only) UnitPrice decimal Unit price of the feature. TotalExclMargin decimal (Read-only) TotalInclMargin decimal (Read-only) GroupPurchasePrice decimal (Read-only) GroupMargin decimal (Read-only) QuotationFile Name Type Description Id Guid Identifier for the QuotationFile. QuotationId Guid Identifier of the quotation. FileId Guid Identifier of the FileEntity . In order to add file to a quotation, a post request should be sent to the quotation endpoint with parameters {id}/addfile QuotationProperty Name Type Description Id Guid Identifier for the quotation property. Description string Description of the quotation property. IsRequired bool Wether the quotation property is required or not. IsReadonly bool Wether the quotation property is read only or not. Texts EntityPropertyType Type of the quotation property. Type EntityPropertyText[] Array containing translations for quotation property Order Guid The order in which the quotation properties are displayed on the quotations page. Fields QuotationPropertyField[] Array containing the fields for FieldSelect type quotation property EntityPropertyType Key Description 0 Text : If the quotation property is marked as a Text type; A string value can be associated with this property. Displayed as single line input field in EMS. 1 Number : If the quotation property is marked as a Number type; A decimal value can be associated with this property. 2 Date : If the feature property is marked as a Date type; a datetime value can be associated with this property. 3 FieldSelect : If the feature property is marked as a FieldSelect type; a text value from a dropdown can be associated with this property. 4 Toggle : If the feature property is marked as a Toggle type; a bool value can be associated with this property. 5 MultiLine : If the feature property is marked as a MultiLine type; a text value can be associated with this property. Displayed as multi line input field in EMS EntityPropertyText Name Type Description Id Guid Identifier of the property text. Value string Value (translation) of the property text. LanguageIso string ISO code of language used for property text (translation) EntityPropertyId Guid Identifier of the entity property the text (translation) belongs to. QuotationPropertyField Name Type Description Id Guid Identifier of the property field. Code string Code of property field Description string Description of property field QuotationPropertyId Guid Identifier of the quotation property this field belongs to. Texts QuotationPropertyFieldText[] Array containing translations for property field. QuotationPropertyFieldText Name Type Description Id Guid Identifier of the property field text. Value string Value (translation) of the property field text. LanguageIso string ISO code of language used for property field text (translation) QuotationPropertyFieldId Guid Identifier of the quotation property field the text (translation) belongs to. FileEntity Name Type Description Id Guid Identifier of the file entity. Name string Name of the file. Url string URL of the file. UnitOfMeasurement Name Type Description Id Guid Identifier for the unit of measurement. Code string The code for the unit of measurement. Example: kg . Description string The description for the unit of measurement. Example: Kilogram . UserCreationRequest Name Type Description Id Guid Identifier for the UserCreationRequest RequestDate DateTimeOffset Date and time for the request in UTC format e.g. 'DD-MM-YYYY HH-MM-SS' RequireTwoFactor bool If two factor authentication is required: true, otherwise false. IsSeller bool CurrencyIso string Three letter ISO (4217) code for the used currency e.g. EUR LanguageIso string Two letter ISO (639-1) code of the text language IsExpired bool (Read-only) Returns true if the UserCreationRequest is expired. Configuration Models that can be used to edit a existing configuration or develop your own custom configurator interface. Name Type Description Id Guid Unique identifier of the configuration session Code string A unique code that represents this configuration session and can be used by a user to resume the session. ConfigurationModelId Guid Identifier of the configuration model that is being configured. Root ConfigurationFeature The root feature of the configuration model that is being configured. Steps ConfigurationStep[] List of steps that is used to structure the configurator UI. PreconfigurationFeatures ConfigurationFeature[] A set of features that should be displayed before the user sees any of the configurator steps. Values { 'id': SelectedValue } Object that gives easy access to a selected value for a given feature. TextValues { 'id': string } Object that gives easy access to a selected text value for a given feature. Requirements ConfigurationRequirement[] Set of requirements made by the user during the configuration session. Language string Two-letter ISO code of the selected configuration language. Currency string Two-letter ISO code of the selected configuration currency. BasePriceExclVat string Formatted string of the base price excluding VAT. BasePriceInclVat string Formatted string of the base price including VAT. BasePriceExclVatNumber decimal Base price excluding VAT. BasePriceInclVatNumber decimal Base price including VAT. AdditionalPriceExclVat string Formatted string of the additional price excluding VAT. AdditionalPriceInclVat string Formatted string of the additional price including VAT. AdditionalPriceExclVatNumber decimal Additional price excluding VAT. AdditionalPriceInclVatNumber decimal Additional price including VAT. TotalPriceExclVat string Formatted string of the total price excluding VAT. TotalPriceInclVat string Formatted string of the total price including VAT. TotalPriceExclVatNumber decimal Total price excluding VAT. TotalPriceInclVatNumber decimal Total price including VAT. Conflicts ConfigurationConflict[] When conflicts occur during the configuration session, this array will be populated with conflict data. ConfigurationFeature Name Type Description Id Guid Unique identifier of this feature's unique position in the configuration model. ConfigurationModelId Guid Identifier of the configuration model this feature belongs to. ParentId Guid? Identifier of the parent feature. Null if this feature is the root. FeatureId Guid Identifier of the feature that is attached. Value decimal Selected value in the configuration session. TextValue string Selected text value in the configuration session. IsSelected boolean Flag indicating if the feature is selected in the configuration session. Code string Code of the feature. Description string Description of the feature. ExtendedDescription string Extended description of the feature. MoreInfo string More info of the feature. Name string Name of the feature. ArticleCode string Same as Code. UnitOfMeasurement string Unit of measurement of the feature. ImageUrl string URL to the image of the feature. Type RelationshipType Relationship type of this feature to its parent. FeatureType ConfigurationFeatureType Determines how the user should interact with this feature in the configurator. DisplayType DisplayType Determines how the feature should be rendered in the configurator. Features ConfigurationFeature[] Child features. IsBestMatch boolean Flag that indicates of the feature is a best match based on a selection in the PreconfigurationFeatures of the configuration session. IsMandatory boolean Flag that indicates if this feature is mandatory. The user should not be provided with a way to create a quotation before this feature is answered. HideInQuotation boolean Flag that indicates that is feature is not displayed in the quotation. The configurator should not display this feature in any overviews. UnitPrice string Formatted string of the unit price excluding VAT. UnitPriceExclVat decimal Unit price excluding VAT. UnitPriceInclVat decimal Unit price including VAT. TotalPrice string Formatted string of the total price excluding VAT. TotalPriceExclVat decimal Total price excluding VAT. TotalPriceInclVat decimal Total price including VAT. MinValue decimal Minimal value of the feature. MaxValue decimal Max value of the feature. StepValue decimal Allowed step values between the minimum and maximum values of the feature. RelationshipType Relationship type of a feature to its parent. Key Description 0 Optional 1 Mandatory 2 Alternative 3 Or ConfigurationFeatureType Determines how the user should interact with this feature in the configurator. Key Description 0 Standard type. 2 Feature should be displayed as a color picker. 3 Feature should be displayed as a text input. DisplayType Key Description 0 Standard 1 Image box 2 Dropdown 4 Searchbar in dialog 5 Table 6 Searchbar not in dialog ConfigurationStep Name Type Description Id Guid Identifier of the step. ConfigurationModelId Guid Identifier of the configuration model this step belongs to. Title string Title of the step. Type StepType Type of the step Features ConfigurationFeature[] Features that should be displayed in this step. IconUrl string URL of the icon that should be displayed for the step. StepType Key Description 2 Hotspots 5 3D ConfigurationConflict Name Type Description Feature ConfigurationFeature The feature that has conflict. Type ConflictType Type of the conflict. RequestedValue decimal If the conflict type is Value , this property holds the value that was requested as part of a user requirement. ActualValue decimal If the conflict type is Value , this property holds the actual value that will be assigned if the conflict is ignored. ConflictType Key Description 0 Add 1 Remove 2 Alternative 3 Value ConfigurationRequirement Name Type Description NodeId Guid Identifier of the configuration feature. Value decimal Selected value. Missing a property? Feel free to contact us at support@elfsquad.io .","title":"Models"},{"location":"ems/models/#models","text":"This page shows an overview of the available models. This list doesn't contain all the possible properties, but only the properties that are relevant.","title":"Models"},{"location":"ems/models/#application-events","text":"There are a number of application event types available through the API. See application event tutorials for more info. Name Type Description Id Guid Identifier of the application event. IntegrationApplicationId Guid Identifier of the integration application that should handle this application event. Handled bool Indicate whether this application event has been handled by the integration application defined by IntegrationApplicationId . HandledDate DateTime DateTime at which the application event was handled by the integration application. Success bool Defines whether the application event was handled successfully by the integration application. ReasonPhrase string Explanation of why the application event has the current success status. Besides the common application event properties, each type of application event has additional information available to it:","title":"Application Events"},{"location":"ems/models/#quotationrequested","text":"Name Type Description QuotationId Guid Identifier of the requested quotation.","title":"QuotationRequested"},{"location":"ems/models/#quotationtopending","text":"Name Type Description QuotationId Guid Identifier of the quotation who's status is set to pending.","title":"QuotationToPending"},{"location":"ems/models/#quotationtoaccepted","text":"Name Type Description QuotationId Guid Identifier of the quotation who's status is set to accepted.","title":"QuotationToAccepted"},{"location":"ems/models/#quotationverified","text":"Name Type Description QuotationId Guid Identifier of the quotation that has been verified.","title":"QuotationVerified"},{"location":"ems/models/#category","text":"Name Type Description Id Guid Identifier of the category. Name string Name of the category. Texts CategoryText[] Translated titles of the category. Subcategories Category[] Array of subcategories. ParentId Guid Identifier of the parent category. Order integer Order in which the category should be displayed in the different product selection pages.","title":"Category"},{"location":"ems/models/#categorytext","text":"Name Type Description Id Guid Identifier of the category text. Value string Value of the text. LanguageIso string Two letter ISO (639-1) code of the text language. CategoryId Guid Identifier of the category.","title":"CategoryText"},{"location":"ems/models/#country","text":"Name Type Description Iso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. Name string Name of the country. Active bool EnglishName string Name of the country, in English. PhonePrefix string Phone prefix number, e.g. '+31' Capital string Capital city of the country","title":"Country"},{"location":"ems/models/#crmaccount","text":"Name Type Description Id Guid Identifier of the CRM account. Salutation string The salutation e.g. 'Dear sir/madam,' FullName string (Read-only) Full name of the account. FirstName string LastNamePrefix string The prefix of the lastName e.g. [FirstName] van der [LastName] LastName string CompanyName string Name of the company. Email string Phone1 string Primary phone number. Phone2 string Secondary phone number. StreetName string HouseNumber string PostalCode string City string CountryIso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. Country string Country e.g. 'United Kingdom' CocNumber string Chamber of Commerce number. VatNumber string Iban string Type integer Type of the CRM account. DefaultContact CrmContact The Default CrmContact DefaultContactId Guid Identifier for the DefaultContact","title":"CrmAccount"},{"location":"ems/models/#relationship-type","text":"Key Description 0 Customer 1 Delivery address 2 Employee","title":"Relationship type"},{"location":"ems/models/#crmcontact","text":"Name Type Description Id Guid Identifier of the CRM contact. Salutation string The salutation e.g. 'Dear sir/madam,' FirstName string LastNamePrefix string The prefix of the last name e.g. [FirstName] van der [LastName]. LastName string CompanyName string The name of the company. Email string Phone1 string Primary phone number. Phone2 string Secondary phone number. StreetName string HouseNumber string PostalCode string City string UseParentAddress bool If this property is set; the contact should inherit it's company's address. CountryIso string Two-letter ISO 3166-1 code of the country, e.g. 'NL'. CrmAccountId Guid Identifier for the CrmAccount","title":"CrmContact"},{"location":"ems/models/#currency","text":"Name Type Description Iso string Three letter ISO 4217:2015 code, e.g. 'EUR'. Name string Name of the curreny. Symbol string Symbol, e.g. '$'. DecimalDigits decimal Rounding decimal NamePlural string","title":"Currency"},{"location":"ems/models/#exchangerate","text":"Name Type Description Id guid Identifier for the ExchangeRate CurrencyIso string Three letter ISO 4217:2015 code, e.g. 'EUR'. Rate decimal","title":"ExchangeRate"},{"location":"ems/models/#feature","text":"Every configuration model is based on features. Features are used to capture rich product information (texts, images, pricing). Once created, features can be categorized and implemented in product structures. Name Type Description Id Guid Identifier of the feature. Name string Name of the feature. ArticleCode string For reference purposes; e.g. the ERP item code. Type integer The type is 0 by default, and 2 if the feature should be displayed as a color picker in the configurator. SalesPrice decimal The sales price of the feature. MinValue decimal Minimal amount. Example: minimal width of a bed has to be 110 cm. A user cannot enter quantities below this minimal value. MaxValue decimal Maximum amount. Example: maximum width of a bed is 210 cm. A user cannot enter quantities higher than this maximum value. StepValue decimal The step amount that is taken into consideration (between min/ max values). Example: with a step value of 10 cm a user cannot select a width of 115cm. This will be rounded off to 120cm. PackingUnit decimal The amount that has to be taken into account when rounding up on the material list. Example: several lines of the same nuts are generated from the configurator to the quotation. This function sums-up all these lines and rounds it up to the packing unit quantity. Category Category Category of which this feature belongs to. CategoryId Guid Identifier for the category to which this feature is attached. SubcategoryIds Guid[] List of identifiers for sub-categories. ThreeDModelItems string[] The names of parts in a 3D model that are associated with this feature. HiddenThreeDModelItems string[] The names of parts in a 3D model that should be hidden when this feature is selected in a configuration. Tags string[] List of tags. A tag can be used to give a feature a certain label. MarginPct decimal Properties FeatureHasFeatureProperty[] Texts FeatureText[] CardImageUrl string URL for the image of the feature. This image is displayed in the cards. OrganizationSellsFeature OrganizationSellsFeature[] VATId Guid VAT that is used as default for this feature. UnitOfMeasurementId Guid Identifier of the Unit of measurement for this feature. UnitOfMeasurement UnitOfMeasurement Unit of measurement for this feature.","title":"Feature"},{"location":"ems/models/#featuretype","text":"Key Description 0 Feature : Default type 2 ColorPicker : If used; the feature will be displayed as a color picker. 3 Text : If used; the feature will be displayed as a text input.","title":"FeatureType"},{"location":"ems/models/#featuretext","text":"Name Type Description Id Guid Identifier of the feature text. LanguageIso string Two letter ISO (639-1) code of the text language. Type integer Type of the feature text. Value string Text value. FeatureId Guid Identifier of the feature.","title":"FeatureText"},{"location":"ems/models/#feature-text-type","text":"Key Description 0 Descriptions : If used; the description will be shown instead of \u2018name\u2019. If left blank; the feature \u2018name\u2019 will be shown in the configurator. 1 Extended descriptions: If used; this text will be shown under the description/name in the configurator. 2 More info: If used; more info can be opened in the configurator. This information is showed in a screen-wide pop-up. 3 Title 4 PromptMessage 5 Quotation text: Optionally, this info can be generated on the quotation template (PDF).","title":"Feature text type"},{"location":"ems/models/#_1","text":"","title":""},{"location":"ems/models/#featureproperty","text":"Name Type Description Id Guid Identifier of the property. Name string Name of the property. Type integer Type of the property AssociatedFeatures AssociatedFeatureProperty[] If the type of this property is set to 1 (AssociatedFeatures) this property is filled with the relationships with features that can be associated with this property.","title":"FeatureProperty"},{"location":"ems/models/#featurepropertytype","text":"Key Description 0 Input : If the feature property is marked as a Input type; a decimal value can be associated with this property. 1 AssociatedFeatures : If the feature property is marked as a AssociatedFeatures type; a selection of defined features can be associated with this property. 2 Text : If the feature property is market as a Text type; a text value can be associated with this property.","title":"FeaturePropertyType"},{"location":"ems/models/#associatedfeatureproperty","text":"The AssociatedFeatureProperty is a relationship between a feature property's AssociatedFeatures list and a Feature. Name Type Description Id Guid Identifier of the associated feature property. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . Feature Feature The Feature object","title":"AssociatedFeatureProperty"},{"location":"ems/models/#featurehasfeatureproperty","text":"Relationship between a feature and a feature property. Name Type Description Id Guid Identifier of the FeatureHasFeatureProperty relationship. FeaturePropertyId Guid Identifier of the feature property . FeatureId Guid Identifier of the feature . Value decimal If the type of the FeaturePropery is set to 0 (Input); this property holds the input value. AssociatedFeatureId Guid If the type of the FeatureProperty is set to 1 (AssociatedFeature); this property holds the feature identifier that is associated with this property.","title":"FeatureHasFeatureProperty"},{"location":"ems/models/#leasetable","text":"Name Type Description CommencementPrice decimal TerminationPrice decimal Currency Currency ExchangeRate ExchangeRate LeaseTableLines List<LeaseTableLines>","title":"LeaseTable"},{"location":"ems/models/#leasetableline","text":"Name Type Description Id Guid Identifier of the LeaseTableLine. LeaseTableId Guid Identifier of the parent LeaseTable . MinValue decimal MaxValue decimal TermValue int TermType TermType Type of the lease term","title":"LeaseTableLine"},{"location":"ems/models/#termtype","text":"A LeaseTableLine can have the following terms: Key Description 0 Days 1 Weeks 2 Months 3 Years","title":"TermType"},{"location":"ems/models/#organization","text":"Name Type Description Id Guid Identifier of the organization. Name string Name of the organization. SettingsId Guid Identifier of the settings corresponding to this organization. Users User[] List of users that are part of this organization. DefaultDiscountPct decimal Organization's default discount percentage. Calculates the margin by decreasing the purchase price. DefaultUpValuePct decimal Organization's default up value percentage. Calculates the margin by increasing the sales price.","title":"Organization"},{"location":"ems/models/#vat","text":"Name Type Description Id Guid Identifier of the VAT. Name string Describes the VAT. Pct decimal Percentage value of the VAT e.g. 21. IncludesVAT boolean Defines whether the price already includes VAT.","title":"VAT"},{"location":"ems/models/#quotation","text":"Name Type Description Id Guid Identifier for the quotation. QuotationNumber int Unique quotation number that is used as a reference. VersionNumber int Version number of the quotation. Default is 1 . RevisionOfId Guid Identifier of the quotation on which this revision is based. Status integer The status of the quotation. IsExpired bool (Read-only) Returns true if the quotation is expired. StatusDescription string (Read-only) Returns the status of the quotation as a text. Example: Concept or Accepted Remarks string A field for remarks. Used to add notes to the quotation. Subject string The subject of the quotation. CustomerReference string Text field that can be used to idenfity the customer. QuotationReference string Text field that can be sued to identify the quotation. ExpiresDate DateTime Date when the state of the quotation is set to expired. DeliveryDate DateTime Date when the quotation is delivered. DebtorId Guid Identifier of the debtor, which is a CRM account . SellerId Guid Identifier of the seller, which is a CRM account . ShipToId Guid Identifier for the shipping address, which is a CRM account . Margin decimal The margin that is used on this quotation in percentages. Example: for 10% the value is 10 . Lines QuotationLine[] Quotation lines for the quotation. CurrencyIso string Two letter ISO (639-1) code of the currency. LanguageIso string Two letter ISO (639-1) code of the language. Files QuotationFile[] List of quotation files that are attached. TotalDiscountAmt decimal (Read-only) Total amount of discount on the total price. TotalDiscountPct decimal Total percentage of discount, e.g. 10 for 10%. SubTotalExclPrice decimal (Read-only) Subtotal price excluding VAT. SubTotalInclPrice decimal (Read-only) Subtotal including VAT. TotalExclPrice decimal (Read-only) Total price excluding VAT. TotalInclPrice decimal (Read-only) Total price including VAT. SubTotalMargin decimal (Read-only) Subtotal margin. TotalMargin decimal (Read-only) Total margin. TotalMarginDiscount decimal (Read-only) Total margin discount. SubTotalPurchasePrice decimal (Read-only) Subtotal purchase price. WholeSaleDiscountAmt decimal (Read-only) Wholesale discount amount. WholeSaleDiscountPct decimal (Read-only) Wholesale discount percentage. Properties QuotationPropertyValue[] Array containing the quotation property values for the quotation PropertyIds Guid[] Ids of selected quotation property fields","title":"Quotation"},{"location":"ems/models/#quotationstatus","text":"A quotation can have the following states: Key Description 0 Concept 1 Declined 2 Accepted 3 Expired 4 Revised 5 Pending 6 Order","title":"QuotationStatus"},{"location":"ems/models/#quotationpropertyvalue","text":"Name Type Description Id Guid Identifier for the quotation property value. EntityId Guid Identifier of the quotation this property value belongs to. EntityPropertyId Guid Identifier of the quotation property this property value belongs to. Value string Value of the quotation property","title":"QuotationPropertyValue"},{"location":"ems/models/#quotationline","text":"Name Type Description QuotationId Guid Identifier of the quotation to which this line belongs. LineNumber int Indicates the sequence of the lines within one quotation. ArticleCode string For reference purposes, e.g. an ERP item code. CardImageUrl string URL to the image for the feature. Description string (Read-only) Description of the feature. ExtendedDescription string (Read-only) Extended description of the feature. MoreInfo string (Read-only) More info of the feature. QuotationText string (Read-only) Quotation text of the feature. FeatureId Guid Identifier of the feature. QuantityAmount decimal Quantity of the feature on this line. Quantity string (Read-only) Number formatted quantity, e.g. 100.14 . UnitOfMeasurement string (Read-only) Unit of measurement of the feature. Default is pcs . Hidden bool Indicates if the line is visible in EMS. ParentLineId Guid Identifier of the parent line (QuotationLine). GroupedRootLine bool Indicates if the quotation line is the root of a group of lines. GroupId Guid Identifier of the group to which this line belongs. GroupOrder int Indicates the order in which the groups are displayed. AddedFromConfiguration bool Indicates that the line has been added from a configuration. ConfigurationId Guid Identifier of the configuration from which this quotation line was created. DiscountPct decimal Discount percentage, e.g. 10 . MarginPct decimal (Read-only) Margin percentage. GroupDiscountPct decimal Discount percentage on the group, e.g. 10 . TotalExclPrice decimal (Read-only) Total price of the quotation line excluding VAT. TotalExclPriceExclDiscount decimal (Read-only) Total price of the quotation excluding VAT and discount. TotalInclPrice decimal (Read-only) Total price including VAT. GroupBaseExclPrice decimal (Read-only) GroupBaseInclPrice decimal (Read-only) GroupAdditionalExclPrice decimal (Read-only) GroupAdditionalInclPrice decimal (Read-only) GroupTotalExclPrice decimal (Read-only) GroupTotalInclPrice decimal (Read-only) DefaultPurchasePriceDiscountPct decimal (Read-only) PurchasePrice decimal (Read-only) UnitPrice decimal Unit price of the feature. TotalExclMargin decimal (Read-only) TotalInclMargin decimal (Read-only) GroupPurchasePrice decimal (Read-only) GroupMargin decimal (Read-only)","title":"QuotationLine"},{"location":"ems/models/#quotationfile","text":"Name Type Description Id Guid Identifier for the QuotationFile. QuotationId Guid Identifier of the quotation. FileId Guid Identifier of the FileEntity . In order to add file to a quotation, a post request should be sent to the quotation endpoint with parameters {id}/addfile","title":"QuotationFile"},{"location":"ems/models/#quotationproperty","text":"Name Type Description Id Guid Identifier for the quotation property. Description string Description of the quotation property. IsRequired bool Wether the quotation property is required or not. IsReadonly bool Wether the quotation property is read only or not. Texts EntityPropertyType Type of the quotation property. Type EntityPropertyText[] Array containing translations for quotation property Order Guid The order in which the quotation properties are displayed on the quotations page. Fields QuotationPropertyField[] Array containing the fields for FieldSelect type quotation property","title":"QuotationProperty"},{"location":"ems/models/#entitypropertytype","text":"Key Description 0 Text : If the quotation property is marked as a Text type; A string value can be associated with this property. Displayed as single line input field in EMS. 1 Number : If the quotation property is marked as a Number type; A decimal value can be associated with this property. 2 Date : If the feature property is marked as a Date type; a datetime value can be associated with this property. 3 FieldSelect : If the feature property is marked as a FieldSelect type; a text value from a dropdown can be associated with this property. 4 Toggle : If the feature property is marked as a Toggle type; a bool value can be associated with this property. 5 MultiLine : If the feature property is marked as a MultiLine type; a text value can be associated with this property. Displayed as multi line input field in EMS","title":"EntityPropertyType"},{"location":"ems/models/#entitypropertytext","text":"Name Type Description Id Guid Identifier of the property text. Value string Value (translation) of the property text. LanguageIso string ISO code of language used for property text (translation) EntityPropertyId Guid Identifier of the entity property the text (translation) belongs to.","title":"EntityPropertyText"},{"location":"ems/models/#quotationpropertyfield","text":"Name Type Description Id Guid Identifier of the property field. Code string Code of property field Description string Description of property field QuotationPropertyId Guid Identifier of the quotation property this field belongs to. Texts QuotationPropertyFieldText[] Array containing translations for property field.","title":"QuotationPropertyField"},{"location":"ems/models/#quotationpropertyfieldtext","text":"Name Type Description Id Guid Identifier of the property field text. Value string Value (translation) of the property field text. LanguageIso string ISO code of language used for property field text (translation) QuotationPropertyFieldId Guid Identifier of the quotation property field the text (translation) belongs to.","title":"QuotationPropertyFieldText"},{"location":"ems/models/#fileentity","text":"Name Type Description Id Guid Identifier of the file entity. Name string Name of the file. Url string URL of the file.","title":"FileEntity"},{"location":"ems/models/#unitofmeasurement","text":"Name Type Description Id Guid Identifier for the unit of measurement. Code string The code for the unit of measurement. Example: kg . Description string The description for the unit of measurement. Example: Kilogram .","title":"UnitOfMeasurement"},{"location":"ems/models/#usercreationrequest","text":"Name Type Description Id Guid Identifier for the UserCreationRequest RequestDate DateTimeOffset Date and time for the request in UTC format e.g. 'DD-MM-YYYY HH-MM-SS' RequireTwoFactor bool If two factor authentication is required: true, otherwise false. IsSeller bool CurrencyIso string Three letter ISO (4217) code for the used currency e.g. EUR LanguageIso string Two letter ISO (639-1) code of the text language IsExpired bool (Read-only) Returns true if the UserCreationRequest is expired.","title":"UserCreationRequest"},{"location":"ems/models/#configuration","text":"Models that can be used to edit a existing configuration or develop your own custom configurator interface. Name Type Description Id Guid Unique identifier of the configuration session Code string A unique code that represents this configuration session and can be used by a user to resume the session. ConfigurationModelId Guid Identifier of the configuration model that is being configured. Root ConfigurationFeature The root feature of the configuration model that is being configured. Steps ConfigurationStep[] List of steps that is used to structure the configurator UI. PreconfigurationFeatures ConfigurationFeature[] A set of features that should be displayed before the user sees any of the configurator steps. Values { 'id': SelectedValue } Object that gives easy access to a selected value for a given feature. TextValues { 'id': string } Object that gives easy access to a selected text value for a given feature. Requirements ConfigurationRequirement[] Set of requirements made by the user during the configuration session. Language string Two-letter ISO code of the selected configuration language. Currency string Two-letter ISO code of the selected configuration currency. BasePriceExclVat string Formatted string of the base price excluding VAT. BasePriceInclVat string Formatted string of the base price including VAT. BasePriceExclVatNumber decimal Base price excluding VAT. BasePriceInclVatNumber decimal Base price including VAT. AdditionalPriceExclVat string Formatted string of the additional price excluding VAT. AdditionalPriceInclVat string Formatted string of the additional price including VAT. AdditionalPriceExclVatNumber decimal Additional price excluding VAT. AdditionalPriceInclVatNumber decimal Additional price including VAT. TotalPriceExclVat string Formatted string of the total price excluding VAT. TotalPriceInclVat string Formatted string of the total price including VAT. TotalPriceExclVatNumber decimal Total price excluding VAT. TotalPriceInclVatNumber decimal Total price including VAT. Conflicts ConfigurationConflict[] When conflicts occur during the configuration session, this array will be populated with conflict data.","title":"Configuration"},{"location":"ems/models/#configurationfeature","text":"Name Type Description Id Guid Unique identifier of this feature's unique position in the configuration model. ConfigurationModelId Guid Identifier of the configuration model this feature belongs to. ParentId Guid? Identifier of the parent feature. Null if this feature is the root. FeatureId Guid Identifier of the feature that is attached. Value decimal Selected value in the configuration session. TextValue string Selected text value in the configuration session. IsSelected boolean Flag indicating if the feature is selected in the configuration session. Code string Code of the feature. Description string Description of the feature. ExtendedDescription string Extended description of the feature. MoreInfo string More info of the feature. Name string Name of the feature. ArticleCode string Same as Code. UnitOfMeasurement string Unit of measurement of the feature. ImageUrl string URL to the image of the feature. Type RelationshipType Relationship type of this feature to its parent. FeatureType ConfigurationFeatureType Determines how the user should interact with this feature in the configurator. DisplayType DisplayType Determines how the feature should be rendered in the configurator. Features ConfigurationFeature[] Child features. IsBestMatch boolean Flag that indicates of the feature is a best match based on a selection in the PreconfigurationFeatures of the configuration session. IsMandatory boolean Flag that indicates if this feature is mandatory. The user should not be provided with a way to create a quotation before this feature is answered. HideInQuotation boolean Flag that indicates that is feature is not displayed in the quotation. The configurator should not display this feature in any overviews. UnitPrice string Formatted string of the unit price excluding VAT. UnitPriceExclVat decimal Unit price excluding VAT. UnitPriceInclVat decimal Unit price including VAT. TotalPrice string Formatted string of the total price excluding VAT. TotalPriceExclVat decimal Total price excluding VAT. TotalPriceInclVat decimal Total price including VAT. MinValue decimal Minimal value of the feature. MaxValue decimal Max value of the feature. StepValue decimal Allowed step values between the minimum and maximum values of the feature.","title":"ConfigurationFeature"},{"location":"ems/models/#relationshiptype","text":"Relationship type of a feature to its parent. Key Description 0 Optional 1 Mandatory 2 Alternative 3 Or","title":"RelationshipType"},{"location":"ems/models/#configurationfeaturetype","text":"Determines how the user should interact with this feature in the configurator. Key Description 0 Standard type. 2 Feature should be displayed as a color picker. 3 Feature should be displayed as a text input.","title":"ConfigurationFeatureType"},{"location":"ems/models/#displaytype","text":"Key Description 0 Standard 1 Image box 2 Dropdown 4 Searchbar in dialog 5 Table 6 Searchbar not in dialog","title":"DisplayType"},{"location":"ems/models/#configurationstep","text":"Name Type Description Id Guid Identifier of the step. ConfigurationModelId Guid Identifier of the configuration model this step belongs to. Title string Title of the step. Type StepType Type of the step Features ConfigurationFeature[] Features that should be displayed in this step. IconUrl string URL of the icon that should be displayed for the step.","title":"ConfigurationStep"},{"location":"ems/models/#steptype","text":"Key Description 2 Hotspots 5 3D","title":"StepType"},{"location":"ems/models/#configurationconflict","text":"Name Type Description Feature ConfigurationFeature The feature that has conflict. Type ConflictType Type of the conflict. RequestedValue decimal If the conflict type is Value , this property holds the value that was requested as part of a user requirement. ActualValue decimal If the conflict type is Value , this property holds the actual value that will be assigned if the conflict is ignored.","title":"ConfigurationConflict"},{"location":"ems/models/#conflicttype","text":"Key Description 0 Add 1 Remove 2 Alternative 3 Value","title":"ConflictType"},{"location":"ems/models/#configurationrequirement","text":"Name Type Description NodeId Guid Identifier of the configuration feature. Value decimal Selected value. Missing a property? Feel free to contact us at support@elfsquad.io .","title":"ConfigurationRequirement"},{"location":"ems/api/configurator/","text":"Configurator endpoints Endpoints that can be used to edit configurations or create your own custom configurator interface. Start new configuration session Starts a new configuration session for a specified configuration model. GET https://api.elfsquad.io/api/3/configurator/new/{IDENTIFIER} URI Parameters Name Description IDENTIFIER Can be either the name of the configuration model's root feature or the unique identifier (GUID) of the configuration model. Query parameters Name Description lang Two-letter ISO code of the language. Response See configuration . Update requirement Update a requirement in the configuration. PUT https://api.elfsquad.io/api/3/configurator/{CONFIGURATION_ID} URI Parameters Name Description CONFIGURATION_ID Identifier of the configuration session. Query Parameters Name Description ignoreConflicts A boolean value that can be set to ignore conflicts. This flag should be used when resolving a conflict in user requirements. Request body Key Type Description FeatureModelNodeId Guid Identifier of the feature. Value decimal Value that should be assigned. IsSelection bool Flag indicating whether the requirement should interpret the value as a boolean to turn on/off the feature. Response See configuration . Change language Change the language of a configuration. PUT https://api.elfsquad.io/api/3/configurator/{CONFIGURATION_ID}/changelanguage URI Parameters Name Description CONFIGURATION_ID Identifier of the configuration session. Request body The two-letter ISO code as text content.","title":"Configurator"},{"location":"ems/api/configurator/#configurator-endpoints","text":"Endpoints that can be used to edit configurations or create your own custom configurator interface.","title":"Configurator endpoints"},{"location":"ems/api/configurator/#start-new-configuration-session","text":"Starts a new configuration session for a specified configuration model. GET https://api.elfsquad.io/api/3/configurator/new/{IDENTIFIER}","title":"Start new configuration session"},{"location":"ems/api/configurator/#uri-parameters","text":"Name Description IDENTIFIER Can be either the name of the configuration model's root feature or the unique identifier (GUID) of the configuration model.","title":"URI Parameters"},{"location":"ems/api/configurator/#query-parameters","text":"Name Description lang Two-letter ISO code of the language.","title":"Query parameters"},{"location":"ems/api/configurator/#response","text":"See configuration .","title":"Response"},{"location":"ems/api/configurator/#update-requirement","text":"Update a requirement in the configuration. PUT https://api.elfsquad.io/api/3/configurator/{CONFIGURATION_ID}","title":"Update requirement"},{"location":"ems/api/configurator/#uri-parameters_1","text":"Name Description CONFIGURATION_ID Identifier of the configuration session.","title":"URI Parameters"},{"location":"ems/api/configurator/#query-parameters_1","text":"Name Description ignoreConflicts A boolean value that can be set to ignore conflicts. This flag should be used when resolving a conflict in user requirements.","title":"Query Parameters"},{"location":"ems/api/configurator/#request-body","text":"Key Type Description FeatureModelNodeId Guid Identifier of the feature. Value decimal Value that should be assigned. IsSelection bool Flag indicating whether the requirement should interpret the value as a boolean to turn on/off the feature.","title":"Request body"},{"location":"ems/api/configurator/#response_1","text":"See configuration .","title":"Response"},{"location":"ems/api/configurator/#change-language","text":"Change the language of a configuration. PUT https://api.elfsquad.io/api/3/configurator/{CONFIGURATION_ID}/changelanguage","title":"Change language"},{"location":"ems/api/configurator/#uri-parameters_2","text":"Name Description CONFIGURATION_ID Identifier of the configuration session.","title":"URI Parameters"},{"location":"ems/api/configurator/#request-body_1","text":"The two-letter ISO code as text content.","title":"Request body"},{"location":"ems/api/endpoints-crud/","text":"Basic endpoints The main endpoint for the API is: https://api.elfsquad.io . Model URI Supported methods ApplicationEvents /api/2/applicationevents GET, POST, PUT, DELETE AssociatedFeatureProperties /api/2/associatedfeatureproperties GET, POST, PUT, DELETE Categories /api/2/categories GET, POST, PUT, DELETE CrmAccounts /api/2/crmaccounts GET, POST, PUT, DELETE FeatureHasFeatureProperty /api/2/featurehasfeatureproperties GET, POST, PUT, DELETE FeatureProperty /api/2/featureproperties GET, POST, PUT, DELETE Feature /api/2/features GET, POST, PUT, DELETE LeaseTable /api/2/leasetables GET, POST, PUT, DELETE Organizations /api/2/organizations GET, POST, PUT, DELETE QuotationLine /api/2/quotationlines GET, POST, PUT, DELETE QuotationProperty /api/2/quotationproperties GET, POST, PUT, DELETE Quotation /api/2/quotations GET, POST, PUT, DELETE UnitOfMeasurement /api/2/uom GET, POST, PUT, DELETE UserCreationRequest /api/2/UserCreationRequests GET, POST, PUT, DELETE VAT /api/2/vats GET, POST, PUT, DELETE Additional note about GET: If the endpoint is requested without an ID, a list of all the entities will be returned. If an ID is specified, a single entity is returned. It is also possible to use query parameters when retrieving a list of entities: Name Type Description Example Skip integer Specifies how many entities should be skipped in the result. GET /api/2/quotations?skip=10&limit=100 Limit integer Specifies how many entities you want to retrieve. GET /api/2/quotations?skip=10&limit=100 Orderby string Used to order the result based on a property of the entity. GET /api/2/features?orderby=name Descending boolean By default the Orderby parameter orders the result in ascending order. If you want to retrieve the result in descending order you need to specify the descending parameter. GET /api/2/features?orderby=name&descending=true Include string All non-native types are by default excluded from the API response. If you require them you have to specify this in the request. Note: Include values should be formatted in CamelCase. GET /api/2/quotations?include=Lines Will return all the lines of the corresponding quotations. You can add multiple include parameters to suffice all your requirements: GET /api/2/quotations?include=Lines&include=Debtor&include=Seller Filter string Besides the native query parameters above; it is also possible to query on entity specific properties. For example; if you want to retrieve a list of all quotations that have the synced property set to true you can use the url: /api/2/quotations?synced=true . Where synced is a property of the quotation model. Additional note about POST/PUT: These methods support a single entity as well as a list of entities. Based on the provided entities the method for a single or bulk will be picked automatically.","title":"Basic endpoints"},{"location":"ems/api/endpoints-crud/#basic-endpoints","text":"The main endpoint for the API is: https://api.elfsquad.io . Model URI Supported methods ApplicationEvents /api/2/applicationevents GET, POST, PUT, DELETE AssociatedFeatureProperties /api/2/associatedfeatureproperties GET, POST, PUT, DELETE Categories /api/2/categories GET, POST, PUT, DELETE CrmAccounts /api/2/crmaccounts GET, POST, PUT, DELETE FeatureHasFeatureProperty /api/2/featurehasfeatureproperties GET, POST, PUT, DELETE FeatureProperty /api/2/featureproperties GET, POST, PUT, DELETE Feature /api/2/features GET, POST, PUT, DELETE LeaseTable /api/2/leasetables GET, POST, PUT, DELETE Organizations /api/2/organizations GET, POST, PUT, DELETE QuotationLine /api/2/quotationlines GET, POST, PUT, DELETE QuotationProperty /api/2/quotationproperties GET, POST, PUT, DELETE Quotation /api/2/quotations GET, POST, PUT, DELETE UnitOfMeasurement /api/2/uom GET, POST, PUT, DELETE UserCreationRequest /api/2/UserCreationRequests GET, POST, PUT, DELETE VAT /api/2/vats GET, POST, PUT, DELETE Additional note about GET: If the endpoint is requested without an ID, a list of all the entities will be returned. If an ID is specified, a single entity is returned. It is also possible to use query parameters when retrieving a list of entities: Name Type Description Example Skip integer Specifies how many entities should be skipped in the result. GET /api/2/quotations?skip=10&limit=100 Limit integer Specifies how many entities you want to retrieve. GET /api/2/quotations?skip=10&limit=100 Orderby string Used to order the result based on a property of the entity. GET /api/2/features?orderby=name Descending boolean By default the Orderby parameter orders the result in ascending order. If you want to retrieve the result in descending order you need to specify the descending parameter. GET /api/2/features?orderby=name&descending=true Include string All non-native types are by default excluded from the API response. If you require them you have to specify this in the request. Note: Include values should be formatted in CamelCase. GET /api/2/quotations?include=Lines Will return all the lines of the corresponding quotations. You can add multiple include parameters to suffice all your requirements: GET /api/2/quotations?include=Lines&include=Debtor&include=Seller Filter string Besides the native query parameters above; it is also possible to query on entity specific properties. For example; if you want to retrieve a list of all quotations that have the synced property set to true you can use the url: /api/2/quotations?synced=true . Where synced is a property of the quotation model. Additional note about POST/PUT: These methods support a single entity as well as a list of entities. Based on the provided entities the method for a single or bulk will be picked automatically.","title":"Basic endpoints"},{"location":"ems/api/start/","text":"Requirements To follow this guide, it is advised to have Google Crome and Postman installed. The examples will show how to the raw HTTP requests with Postman. Postman can be downloaded from their website . The getting started guide contains the following content: Requesting an access token Creating a request and attaching the access token. Examples in C# and Python. Authentication Adding an integration application Open your EMS environment . In the navigation menu open Integrations . Add a new integration application by clicking the add button in the bottom-right corner. Add an Elfsquad Connect application. Copy the ApplicationId and Secret and store them in a safe place. Retrieving an access token To make requests to our API, you will first need to request an access token. To request an access token, make a HTTP request to the API with the following parameters: URI: POST https://api.elfsquad.io/api/2/auth/elfskotconnectlogin Content-type: application/json Body: { \"clientId\" : \"2313449e-b71a-4abd-b3df-934eec91712e\" , \"secret\" : \"cbg7cult\" } When the request is submitted, and all the parameters are correct, the API will return an access token: { \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJqdGkiOiI3Y2JhNTY4MC03MTA5LTQ4Y2QtOWIzMi0zZTBjMzVlODA2ODciLCJpYXQiOjE1MzkzMzIxMDYsInRlbmFudGlkIjoiYTRlY2U3OWYtZjZmMC00YzgwLTljYmEtMDhkNGFkMGQ4NTRmIiwib3JnYW5pemF0aW9uaWQiOiIiLCJpc0VsZnNrb3RDb25uZWN0IjoiVHJ1ZSIsIm5iZiI6MTUzOTMzMjEwNiwiZXhwIjoxNTM5MzMzOTA2LCJpc3MiOiJodHRwczovL2FwaS5lbGZza290LmNsb3VkLyIsImF1ZCI6Imh0dHBzOi8vYXBpLmVsZnNrb3QuY2xvdWQvIn0.lqVHiSG7wZkmFtuuRY5n3S_sGYazHYdD8HMokRL7Lf0\" , \"expiresIn\" : 1800000 } An example of how this is done in Postman, is shown below: Error responses If the API gives a 415 Unsupported Media Type error, make sure that the content type of the request is set to application/json . In the case of a not authorized error, make sure that you have added the integration application, and that the clientId and secret are correct. Creating a request Now we can use the access token to authenticate with theElfsquad API. For any requests to the API, the access token should be added to the HTTP Authorization request header. An example is shown below where we retrieve a list of features: URI: GET https://api.elfsquad.io/api/2/features Headers: Key Value Authorization bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... A Postman example which retrieves all the features is shown below: Example (C#): Requesting an access token The following C# example demonstrates how to retrieve an access token from the API: // Retrieves an access token from the API. This requires an integration application in // theElfsquad Management System. See http://docs.elfsquad.io for more information. string RequestAccessToken ( string applicationId , string secret ) { using ( var client = new HttpClient ()) { var body = JsonConvert . SerializeObject ( new { clientId = applicationId , secret = secret }); var request = new HttpRequestMessage ( HttpMethod . Post , \"https://api.elfsquad.io/api/2/auth/elfskotconnectlogin\" ); request . Content = new StringContent ( body , Encoding . UTF8 , \"application/json\" ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { Console . WriteLine ( \"Successfully retrieved an access token.\" ); return JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ). accessToken ; } else { throw new HttpRequestException ( $ \"Failed to request access token, server responded with status code: {response.StatusCode}\" ); } } } This access token should present in the HTTP Authorization request header for every request.","title":"Getting started"},{"location":"ems/api/start/#requirements","text":"To follow this guide, it is advised to have Google Crome and Postman installed. The examples will show how to the raw HTTP requests with Postman. Postman can be downloaded from their website . The getting started guide contains the following content: Requesting an access token Creating a request and attaching the access token. Examples in C# and Python.","title":"Requirements"},{"location":"ems/api/start/#authentication","text":"","title":"Authentication"},{"location":"ems/api/start/#adding-an-integration-application","text":"Open your EMS environment . In the navigation menu open Integrations . Add a new integration application by clicking the add button in the bottom-right corner. Add an Elfsquad Connect application. Copy the ApplicationId and Secret and store them in a safe place.","title":"Adding an integration application"},{"location":"ems/api/start/#retrieving-an-access-token","text":"To make requests to our API, you will first need to request an access token. To request an access token, make a HTTP request to the API with the following parameters: URI: POST https://api.elfsquad.io/api/2/auth/elfskotconnectlogin Content-type: application/json Body: { \"clientId\" : \"2313449e-b71a-4abd-b3df-934eec91712e\" , \"secret\" : \"cbg7cult\" } When the request is submitted, and all the parameters are correct, the API will return an access token: { \"accessToken\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJqdGkiOiI3Y2JhNTY4MC03MTA5LTQ4Y2QtOWIzMi0zZTBjMzVlODA2ODciLCJpYXQiOjE1MzkzMzIxMDYsInRlbmFudGlkIjoiYTRlY2U3OWYtZjZmMC00YzgwLTljYmEtMDhkNGFkMGQ4NTRmIiwib3JnYW5pemF0aW9uaWQiOiIiLCJpc0VsZnNrb3RDb25uZWN0IjoiVHJ1ZSIsIm5iZiI6MTUzOTMzMjEwNiwiZXhwIjoxNTM5MzMzOTA2LCJpc3MiOiJodHRwczovL2FwaS5lbGZza290LmNsb3VkLyIsImF1ZCI6Imh0dHBzOi8vYXBpLmVsZnNrb3QuY2xvdWQvIn0.lqVHiSG7wZkmFtuuRY5n3S_sGYazHYdD8HMokRL7Lf0\" , \"expiresIn\" : 1800000 } An example of how this is done in Postman, is shown below:","title":"Retrieving an access token"},{"location":"ems/api/start/#error-responses","text":"If the API gives a 415 Unsupported Media Type error, make sure that the content type of the request is set to application/json . In the case of a not authorized error, make sure that you have added the integration application, and that the clientId and secret are correct.","title":"Error responses"},{"location":"ems/api/start/#creating-a-request","text":"Now we can use the access token to authenticate with theElfsquad API. For any requests to the API, the access token should be added to the HTTP Authorization request header. An example is shown below where we retrieve a list of features: URI: GET https://api.elfsquad.io/api/2/features Headers: Key Value Authorization bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... A Postman example which retrieves all the features is shown below:","title":"Creating a request"},{"location":"ems/api/start/#example-c-requesting-an-access-token","text":"The following C# example demonstrates how to retrieve an access token from the API: // Retrieves an access token from the API. This requires an integration application in // theElfsquad Management System. See http://docs.elfsquad.io for more information. string RequestAccessToken ( string applicationId , string secret ) { using ( var client = new HttpClient ()) { var body = JsonConvert . SerializeObject ( new { clientId = applicationId , secret = secret }); var request = new HttpRequestMessage ( HttpMethod . Post , \"https://api.elfsquad.io/api/2/auth/elfskotconnectlogin\" ); request . Content = new StringContent ( body , Encoding . UTF8 , \"application/json\" ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { Console . WriteLine ( \"Successfully retrieved an access token.\" ); return JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ). accessToken ; } else { throw new HttpRequestException ( $ \"Failed to request access token, server responded with status code: {response.StatusCode}\" ); } } } This access token should present in the HTTP Authorization request header for every request.","title":"Example (C#): Requesting an access token"},{"location":"ems/api/webhooks/","text":"Webhooks Webhooks allow you to build integrations which subscribe to certain events inElfsquad. When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured CallbackUrl . Events Name Description quotation.requested Triggered when a new quotation is requested in the showroom. quotation.submitted Triggered when a quotation is submitted. quotation.accepted Triggered when a quotation is accepted. quotation.verified Triggered when a quotation is verified. Event response examples This section provides an overview of different examples of response payloads. quotation.requested, quotation.submitted, quotation.accepted, quotation.verified { \"quotationId\" : \"56c4942c-d9c4-49db-beec-c1afcb1041c7\" , \"userId\" : \"690dfb4a-6a8c-4816-b33e-f1f4565eb770\" } Creating a webhooks subscription To create a new webhooks subscription you send a HTTP POST request: URI: POST https://api.elfsquad.io/api/2/webhooks Content-Type: application/json Body : { \"identifier\" : \"2313449eb71a4abb3df934eec91712e\" , \"topic\" : \"quotation.submitted\" , \"callbackUrl\" : \"https://example.com/subscriptions/quotationrequested\" } Request payload Name Type Description Identifier string A unique identifier for this webhook subscription. The identifier can be used to unsubscribe the webhook. Topic string The name of the event you wish to subscribe to. CallbackUrl string A url that will be called when the subscribed event is triggered. Handling a webhooks response When the subscribed event is triggered we will send a POST request to the callbackUrl with the following payload: { \"topic\" : \"quotation.submitted\" , \"content\" : { \"quotationId\" : \"56c4942c-d9c4-49db-beec-c1afcb1041c7\" , \"userId\" : \"690dfb4a-6a8c-4816-b33e-f1f4565eb770\" } } Webhook response payload Name Type Description Topic string The name of the event that was triggered. Content object Each event has a different response object. See the section events for a detailed description. Unsubscribing a webhook To delete a webhooks subscription you send a HTTP DELETE request: URI: DELETE https://api.elfsquad.io/api/2/webhooks/{identifier}","title":"Webhooks"},{"location":"ems/api/webhooks/#webhooks","text":"Webhooks allow you to build integrations which subscribe to certain events inElfsquad. When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured CallbackUrl .","title":"Webhooks"},{"location":"ems/api/webhooks/#events","text":"Name Description quotation.requested Triggered when a new quotation is requested in the showroom. quotation.submitted Triggered when a quotation is submitted. quotation.accepted Triggered when a quotation is accepted. quotation.verified Triggered when a quotation is verified.","title":"Events"},{"location":"ems/api/webhooks/#event-response-examples","text":"This section provides an overview of different examples of response payloads.","title":"Event response examples"},{"location":"ems/api/webhooks/#quotationrequested-quotationsubmitted-quotationaccepted-quotationverified","text":"{ \"quotationId\" : \"56c4942c-d9c4-49db-beec-c1afcb1041c7\" , \"userId\" : \"690dfb4a-6a8c-4816-b33e-f1f4565eb770\" }","title":"quotation.requested, quotation.submitted, quotation.accepted, quotation.verified"},{"location":"ems/api/webhooks/#creating-a-webhooks-subscription","text":"To create a new webhooks subscription you send a HTTP POST request: URI: POST https://api.elfsquad.io/api/2/webhooks Content-Type: application/json Body : { \"identifier\" : \"2313449eb71a4abb3df934eec91712e\" , \"topic\" : \"quotation.submitted\" , \"callbackUrl\" : \"https://example.com/subscriptions/quotationrequested\" }","title":"Creating a webhooks subscription"},{"location":"ems/api/webhooks/#request-payload","text":"Name Type Description Identifier string A unique identifier for this webhook subscription. The identifier can be used to unsubscribe the webhook. Topic string The name of the event you wish to subscribe to. CallbackUrl string A url that will be called when the subscribed event is triggered.","title":"Request payload"},{"location":"ems/api/webhooks/#handling-a-webhooks-response","text":"When the subscribed event is triggered we will send a POST request to the callbackUrl with the following payload: { \"topic\" : \"quotation.submitted\" , \"content\" : { \"quotationId\" : \"56c4942c-d9c4-49db-beec-c1afcb1041c7\" , \"userId\" : \"690dfb4a-6a8c-4816-b33e-f1f4565eb770\" } }","title":"Handling a webhooks response"},{"location":"ems/api/webhooks/#webhook-response-payload","text":"Name Type Description Topic string The name of the event that was triggered. Content object Each event has a different response object. See the section events for a detailed description.","title":"Webhook response payload"},{"location":"ems/api/webhooks/#unsubscribing-a-webhook","text":"To delete a webhooks subscription you send a HTTP DELETE request: URI: DELETE https://api.elfsquad.io/api/2/webhooks/{identifier}","title":"Unsubscribing a webhook"},{"location":"ems/api/tutorial/applicationevents/","text":"Application events This tutorial describes how a integration application can act on different events that occur in theElfsquad product configurator. As of this writing there are 3 application events exposed through the API: Name Description QuotationRequested Event is emitted when a quotation is requested either through the configurator or order entry(EMS). QuotationToPending This event is emitted when a quotation's status is set to Pending. QuotationToAccepted This event is emitted when a quotation's status is set to Accepted. QuotationVerified This event is emitted when a quotation's status is set to Verified. See /ems/models/#application-events for information about application event models.","title":"Tutorial: Application Events"},{"location":"ems/api/tutorial/applicationevents/#application-events","text":"This tutorial describes how a integration application can act on different events that occur in theElfsquad product configurator. As of this writing there are 3 application events exposed through the API: Name Description QuotationRequested Event is emitted when a quotation is requested either through the configurator or order entry(EMS). QuotationToPending This event is emitted when a quotation's status is set to Pending. QuotationToAccepted This event is emitted when a quotation's status is set to Accepted. QuotationVerified This event is emitted when a quotation's status is set to Verified. See /ems/models/#application-events for information about application event models.","title":"Application events"},{"location":"ems/api/tutorial/custom%20configurator/","text":"Quick overview In this tutorial I will provide a quick overview of the endpoints that can be used to implement your own customer-facing configurator. Step 1. Retrieve a list of configuration models. The first thing we want to do is provide the user with a selection of available configuration models. In order to achieve this we can use the featuremodels endpoint : GET /api/2/featuremodels?include=RootFeature It is important we include the RootFeature property as it will contain information such as the name, price and image for a particular configuration model. Step 2. Start a new configuration When a user has selected a configuration model to be configured, we can use the Id property to start a new configuration session. GET /api/2/configurations/startnew/{featureModelId} Result ( Some data has been emitted for clarity. ): { \"id\" : \"9c83b007-7e61-4b4c-9920-f125606844d5\" , \"currencyIso\" : \"eur\" , \"currency\" : { \"iso\" : \"eur\" , \"name\" : \"Euro\" , \"symbol\" : \"\\u20ac\" , \"decimalDigits\" : 2 , \"rounding\" : 0 , \"namePlural\" : \"Euros\" , \"isDefault\" : false }, \"languageIso\" : \"nl\" , \"countryIso\" : \"nl\" , \"featureModelId\" : \"b8230fc6-454c-4190-a33a-08d5640714ca\" , \"featureModel\" : ... , \"values\" : { \"7bcf2363-4300-4a6a-faa9-08d5640714d2\" : 1 , \"580b4519-1a7a-46f9-fa7d-08d5640714d2\" : 4 , \"8c81fabc-eaed-41e2-8ec2-08d5d10145ad\" : 4 , \"e22f606d-3e4e-462e-8ec3-08d5d10145ad\" : 72 , ... }, \"conflicts\" : null , \"basePrice\" : 42750 , \"basePriceLabel\" : \"\\u20ac 42.750,00\" , \"basePriceIncVAT\" : 42750 , \"basePriceIncVATLabel\" : \"\\u20ac 42.750,00\" , \"basePriceExVAT\" : 42750 , \"basePriceExVATLabel\" : \"\\u20ac 42.750,00\" , \"additionalPrice\" : 10730 , \"additionalPriceLabel\" : \"\\u20ac 10.730,00\" , \"additionalPriceIncVAT\" : 10730 , \"additionalPriceIncVATLabel\" : \"\\u20ac 10.730,00\" , \"additionalPriceExVAT\" : 10730 , \"additionalPriceExVATLabel\" : \"\\u20ac 10.730,00\" , \"totalPrice\" : 53480 , \"totalPriceLabel\" : \"\\u20ac 53.480,00\" , \"totalPriceExVAT\" : 53480 , \"totalPriceExVATLabel\" : \"\\u20ac 53.480,00\" , \"totalPriceIncVAT\" : 53480 , \"totalPriceIncVATLabel\" : \"\\u20ac 53.480,00\" , \"leasePrices\" : null , \"leasePricesLabels\" : null } Overview of important configuration properties: Name Type Description Id Guid Identifier of the configuration session. This id is used for updating configuration values and requesting a quotation. FeatureModel object Object that represents the entire configuration model. This object should be used to build the configurator UI. Values object Object that contains all values of the configuration. The key represents the identifier of a feature model node. The value represents the selected value for that particular node. Conflicts object If a conflict occurs during the configuration process this object will be filled with conflicting nodes and solution options. Step 3. Update value In order to update a value for a particular option we use the update endpoint: PUT /api/2/configurations/{configurationId}?ignoreConflicts=true&compress=true The ignoreConflicts parameter is optional. When this parameter is set to true the configurator will automatically resolve any conflicts that might occur. The compress parameter is also optional, but recommended. It will ensure only values will be returned that actually changed. Request body: {featureModelNodeId: \"949af91c-8a0b-4540-fa87-08d5640714d2\", value: 1} Name Type Description featureModelNodeId Guid Identifier of the feature model node. value number User-selected value for the option. 0 for false, 1 for true, or any other number when the option is provided as an input field.","title":"Custom configurator"},{"location":"ems/api/tutorial/custom%20configurator/#quick-overview","text":"In this tutorial I will provide a quick overview of the endpoints that can be used to implement your own customer-facing configurator.","title":"Quick overview"},{"location":"ems/api/tutorial/custom%20configurator/#step-1-retrieve-a-list-of-configuration-models","text":"The first thing we want to do is provide the user with a selection of available configuration models. In order to achieve this we can use the featuremodels endpoint : GET /api/2/featuremodels?include=RootFeature It is important we include the RootFeature property as it will contain information such as the name, price and image for a particular configuration model.","title":"Step 1. Retrieve a list of configuration models."},{"location":"ems/api/tutorial/custom%20configurator/#step-2-start-a-new-configuration","text":"When a user has selected a configuration model to be configured, we can use the Id property to start a new configuration session. GET /api/2/configurations/startnew/{featureModelId} Result ( Some data has been emitted for clarity. ): { \"id\" : \"9c83b007-7e61-4b4c-9920-f125606844d5\" , \"currencyIso\" : \"eur\" , \"currency\" : { \"iso\" : \"eur\" , \"name\" : \"Euro\" , \"symbol\" : \"\\u20ac\" , \"decimalDigits\" : 2 , \"rounding\" : 0 , \"namePlural\" : \"Euros\" , \"isDefault\" : false }, \"languageIso\" : \"nl\" , \"countryIso\" : \"nl\" , \"featureModelId\" : \"b8230fc6-454c-4190-a33a-08d5640714ca\" , \"featureModel\" : ... , \"values\" : { \"7bcf2363-4300-4a6a-faa9-08d5640714d2\" : 1 , \"580b4519-1a7a-46f9-fa7d-08d5640714d2\" : 4 , \"8c81fabc-eaed-41e2-8ec2-08d5d10145ad\" : 4 , \"e22f606d-3e4e-462e-8ec3-08d5d10145ad\" : 72 , ... }, \"conflicts\" : null , \"basePrice\" : 42750 , \"basePriceLabel\" : \"\\u20ac 42.750,00\" , \"basePriceIncVAT\" : 42750 , \"basePriceIncVATLabel\" : \"\\u20ac 42.750,00\" , \"basePriceExVAT\" : 42750 , \"basePriceExVATLabel\" : \"\\u20ac 42.750,00\" , \"additionalPrice\" : 10730 , \"additionalPriceLabel\" : \"\\u20ac 10.730,00\" , \"additionalPriceIncVAT\" : 10730 , \"additionalPriceIncVATLabel\" : \"\\u20ac 10.730,00\" , \"additionalPriceExVAT\" : 10730 , \"additionalPriceExVATLabel\" : \"\\u20ac 10.730,00\" , \"totalPrice\" : 53480 , \"totalPriceLabel\" : \"\\u20ac 53.480,00\" , \"totalPriceExVAT\" : 53480 , \"totalPriceExVATLabel\" : \"\\u20ac 53.480,00\" , \"totalPriceIncVAT\" : 53480 , \"totalPriceIncVATLabel\" : \"\\u20ac 53.480,00\" , \"leasePrices\" : null , \"leasePricesLabels\" : null } Overview of important configuration properties: Name Type Description Id Guid Identifier of the configuration session. This id is used for updating configuration values and requesting a quotation. FeatureModel object Object that represents the entire configuration model. This object should be used to build the configurator UI. Values object Object that contains all values of the configuration. The key represents the identifier of a feature model node. The value represents the selected value for that particular node. Conflicts object If a conflict occurs during the configuration process this object will be filled with conflicting nodes and solution options.","title":"Step 2. Start a new configuration"},{"location":"ems/api/tutorial/custom%20configurator/#step-3-update-value","text":"In order to update a value for a particular option we use the update endpoint: PUT /api/2/configurations/{configurationId}?ignoreConflicts=true&compress=true The ignoreConflicts parameter is optional. When this parameter is set to true the configurator will automatically resolve any conflicts that might occur. The compress parameter is also optional, but recommended. It will ensure only values will be returned that actually changed. Request body: {featureModelNodeId: \"949af91c-8a0b-4540-fa87-08d5640714d2\", value: 1} Name Type Description featureModelNodeId Guid Identifier of the feature model node. value number User-selected value for the option. 0 for false, 1 for true, or any other number when the option is provided as an input field.","title":"Step 3. Update value"},{"location":"ems/api/tutorial/features/","text":"Introduction In this tutorial we will show how you can manage features. The examples will show the following: How to retrieve a list of features. How to create a new feature. How to retrieve a single feature. How to update a feature. How to delete a feature. There is also a complete project available for download . This project contains example code that will show how to accomplish the above described tasks. If you do not know how to connect to the API, please check out the getting started with the API first. Retrieving an access token The following C# function will retrieve an access token from the API. // Retrieves an access token from the API. This requires an integration application in // theElfsquad Management System. See http://docs.elfsquad.io for more information. static string RequestAccessToken ( string applicationId , string secret ) { using ( var client = new HttpClient ()) { var body = JsonConvert . SerializeObject ( new { clientId = applicationId , secret = secret }); var request = new HttpRequestMessage ( HttpMethod . Post , \"https://api.elfsquad.io/api/2/auth/elfskotconnectlogin\" ); request . Content = new StringContent ( body , Encoding . UTF8 , \"application/json\" ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { Console . WriteLine ( \"Successfully retrieved an access token.\" ); return JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ). accessToken ; } else { throw new HttpRequestException ( $ \"Failed to request access token, server responded with status code: {response.StatusCode}\" ); } } } The access token should be included in every request. Retrieving a list of features To request all the features, we will call the following endpoint: https://api.elfsquad.io/api/2/features?include=Texts&skip=0&take=5 . // Retrieve a list of all features. static void RetrieveAllFeatures ( string token ) { using ( var client = new HttpClient ()) { // Appending ?include=Texts will have the API to include the texts. You can also use skip/take to filter. // All the filter parameters are optional. See http://docs.elfsquad.io for more information about filtering options. var request = new HttpRequestMessage ( HttpMethod . Get , \"https://api.elfsquad.io/api/2/features?include=Texts&skip=0&take=5\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { var features = JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ); Console . WriteLine ( $ \"Retrieved {features.Count} features.\" ); Console . WriteLine ( features . First ); // We can also loop through all the retrieved features. //foreach(var feature in features) //{ // Console.WriteLine(feature.name); //} } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } } Creating a new feature To create a new feature, we first need to create a JSON object. This example creates an anonymous object which is converted to a JSON object. It is possible to include multiple layers of objects, i.e. the feature and the texts can be created in a single request. All the languages are already available in the API, as defined in ISO 639-1. Simply fill the languageIso with the two letter ISO. The API will return the created model at the end of the request. This contains the assigned ID which can be used later. // Creates a new feature in yourElfsquad Management System, and // returns the ID of the newly created feature. static object CreateFeature ( string token ) { // This object is serialized to a JSON string, see the raw HTTP content // to see what the request looks like. var feature = new { name = \"Example feature\" , articleCode = \"CODE-123\" , salesPrice = 1000 m , packingUnit = 1 , texts = new List < object >() { new { languageIso = \"en\" , // 2-letter ISO code, all the languages are already there. type = 0 , // Description value = \"Example feature description\" }, new { languageIso = \"en\" , type = 1 , // Extended description value = \"Example feature extended description\" }, new { languageIso = \"en\" , type = 2 , // More info value = \"Example feature more info\" } }, cardImageUrl = \"https://www.elfsquad.io/wp-content/themes/elfskot/dist/svg/logo-elfskot.svg\" }; using ( var client = new HttpClient ()) { var request = new HttpRequestMessage ( HttpMethod . Post , \"https://api.elfsquad.io/api/2/features\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); request . Content = new StringContent ( JsonConvert . SerializeObject ( feature ), Encoding . UTF8 , \"application/json\" ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { // The entire feature is stored in 'result'. var result = JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ); Console . WriteLine ( $ \"Successfully created new feature with id: {result.id}\" ); return result ; } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } } Retrieve a single feature To retrieve a single feature, call the endpoint https://api.elfsquad.io/api/2/features/{id}?include=Texts with the ID of the feature. If you want additional properties, such as texts, they need to be included seperately. If a property is null , you probably need to include this in the request. // Retrieve a single feature by ID. static object RetrieveFeatureById ( string token , string id ) { using ( var client = new HttpClient ()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage ( HttpMethod . Get , $ \"https://api.elfsquad.io/api/2/features/{id}?include=Texts\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { var content = response . Content . ReadAsStringAsync (). Result ; var feature = JsonConvert . DeserializeObject < dynamic >( content ); Console . WriteLine ( feature ); return feature ; } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } } Update an existing feature Updating an existing feature is almost identical to creating a new feature. Send the feature object to the API with the HTTP PUT method. The API will return the updated feature object. // Updates a feature. static void UpdateFeature ( string token , dynamic feature ) { using ( var client = new HttpClient ()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage ( HttpMethod . Put , $ \"https://api.elfsquad.io/api/2/features\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); request . Content = new StringContent ( JsonConvert . SerializeObject ( feature ), Encoding . UTF8 , \"application/json\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { var content = response . Content . ReadAsStringAsync (). Result ; var result = JsonConvert . DeserializeObject < dynamic >( content ); Console . WriteLine ( result ); } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } } Delete a feature To delete a feature, we call the following endpoint https://api.elfsquad.io/api/2/features/{id} , where the id is the ID of the feature to be deleted. Be aware that if a feature is deleted, it will also be removed from all existing feature models. // Deletes a feature. static void DeleteFeature ( string token , string id ) { using ( var client = new HttpClient ()) { var request = new HttpRequestMessage ( HttpMethod . Delete , $ \"https://api.elfsquad.io/api/2/features/{id}\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { Console . WriteLine ( \"Feature has been successfully deleted.\" ); } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } }","title":"Tutorial: Features"},{"location":"ems/api/tutorial/features/#introduction","text":"In this tutorial we will show how you can manage features. The examples will show the following: How to retrieve a list of features. How to create a new feature. How to retrieve a single feature. How to update a feature. How to delete a feature. There is also a complete project available for download . This project contains example code that will show how to accomplish the above described tasks. If you do not know how to connect to the API, please check out the getting started with the API first.","title":"Introduction"},{"location":"ems/api/tutorial/features/#retrieving-an-access-token","text":"The following C# function will retrieve an access token from the API. // Retrieves an access token from the API. This requires an integration application in // theElfsquad Management System. See http://docs.elfsquad.io for more information. static string RequestAccessToken ( string applicationId , string secret ) { using ( var client = new HttpClient ()) { var body = JsonConvert . SerializeObject ( new { clientId = applicationId , secret = secret }); var request = new HttpRequestMessage ( HttpMethod . Post , \"https://api.elfsquad.io/api/2/auth/elfskotconnectlogin\" ); request . Content = new StringContent ( body , Encoding . UTF8 , \"application/json\" ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { Console . WriteLine ( \"Successfully retrieved an access token.\" ); return JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ). accessToken ; } else { throw new HttpRequestException ( $ \"Failed to request access token, server responded with status code: {response.StatusCode}\" ); } } } The access token should be included in every request.","title":"Retrieving an access token"},{"location":"ems/api/tutorial/features/#retrieving-a-list-of-features","text":"To request all the features, we will call the following endpoint: https://api.elfsquad.io/api/2/features?include=Texts&skip=0&take=5 . // Retrieve a list of all features. static void RetrieveAllFeatures ( string token ) { using ( var client = new HttpClient ()) { // Appending ?include=Texts will have the API to include the texts. You can also use skip/take to filter. // All the filter parameters are optional. See http://docs.elfsquad.io for more information about filtering options. var request = new HttpRequestMessage ( HttpMethod . Get , \"https://api.elfsquad.io/api/2/features?include=Texts&skip=0&take=5\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { var features = JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ); Console . WriteLine ( $ \"Retrieved {features.Count} features.\" ); Console . WriteLine ( features . First ); // We can also loop through all the retrieved features. //foreach(var feature in features) //{ // Console.WriteLine(feature.name); //} } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } }","title":"Retrieving a list of features"},{"location":"ems/api/tutorial/features/#creating-a-new-feature","text":"To create a new feature, we first need to create a JSON object. This example creates an anonymous object which is converted to a JSON object. It is possible to include multiple layers of objects, i.e. the feature and the texts can be created in a single request. All the languages are already available in the API, as defined in ISO 639-1. Simply fill the languageIso with the two letter ISO. The API will return the created model at the end of the request. This contains the assigned ID which can be used later. // Creates a new feature in yourElfsquad Management System, and // returns the ID of the newly created feature. static object CreateFeature ( string token ) { // This object is serialized to a JSON string, see the raw HTTP content // to see what the request looks like. var feature = new { name = \"Example feature\" , articleCode = \"CODE-123\" , salesPrice = 1000 m , packingUnit = 1 , texts = new List < object >() { new { languageIso = \"en\" , // 2-letter ISO code, all the languages are already there. type = 0 , // Description value = \"Example feature description\" }, new { languageIso = \"en\" , type = 1 , // Extended description value = \"Example feature extended description\" }, new { languageIso = \"en\" , type = 2 , // More info value = \"Example feature more info\" } }, cardImageUrl = \"https://www.elfsquad.io/wp-content/themes/elfskot/dist/svg/logo-elfskot.svg\" }; using ( var client = new HttpClient ()) { var request = new HttpRequestMessage ( HttpMethod . Post , \"https://api.elfsquad.io/api/2/features\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); request . Content = new StringContent ( JsonConvert . SerializeObject ( feature ), Encoding . UTF8 , \"application/json\" ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { // The entire feature is stored in 'result'. var result = JsonConvert . DeserializeObject < dynamic >( response . Content . ReadAsStringAsync (). Result ); Console . WriteLine ( $ \"Successfully created new feature with id: {result.id}\" ); return result ; } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } }","title":"Creating a new feature"},{"location":"ems/api/tutorial/features/#retrieve-a-single-feature","text":"To retrieve a single feature, call the endpoint https://api.elfsquad.io/api/2/features/{id}?include=Texts with the ID of the feature. If you want additional properties, such as texts, they need to be included seperately. If a property is null , you probably need to include this in the request. // Retrieve a single feature by ID. static object RetrieveFeatureById ( string token , string id ) { using ( var client = new HttpClient ()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage ( HttpMethod . Get , $ \"https://api.elfsquad.io/api/2/features/{id}?include=Texts\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { var content = response . Content . ReadAsStringAsync (). Result ; var feature = JsonConvert . DeserializeObject < dynamic >( content ); Console . WriteLine ( feature ); return feature ; } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } }","title":"Retrieve a single feature"},{"location":"ems/api/tutorial/features/#update-an-existing-feature","text":"Updating an existing feature is almost identical to creating a new feature. Send the feature object to the API with the HTTP PUT method. The API will return the updated feature object. // Updates a feature. static void UpdateFeature ( string token , dynamic feature ) { using ( var client = new HttpClient ()) { // Appending ?include=Texts will have the API to include the texts. var request = new HttpRequestMessage ( HttpMethod . Put , $ \"https://api.elfsquad.io/api/2/features\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); request . Content = new StringContent ( JsonConvert . SerializeObject ( feature ), Encoding . UTF8 , \"application/json\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { var content = response . Content . ReadAsStringAsync (). Result ; var result = JsonConvert . DeserializeObject < dynamic >( content ); Console . WriteLine ( result ); } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } }","title":"Update an existing feature"},{"location":"ems/api/tutorial/features/#delete-a-feature","text":"To delete a feature, we call the following endpoint https://api.elfsquad.io/api/2/features/{id} , where the id is the ID of the feature to be deleted. Be aware that if a feature is deleted, it will also be removed from all existing feature models. // Deletes a feature. static void DeleteFeature ( string token , string id ) { using ( var client = new HttpClient ()) { var request = new HttpRequestMessage ( HttpMethod . Delete , $ \"https://api.elfsquad.io/api/2/features/{id}\" ); request . Headers . Add ( \"Authorization\" , $ \"bearer {token}\" ); PrintHTTPRequest ( request ); var response = client . SendAsync ( request ). Result ; if ( response . IsSuccessStatusCode ) { Console . WriteLine ( \"Feature has been successfully deleted.\" ); } else { throw new HttpRequestException ( $ \"Failed HTTP request, server responded with status code: {response.StatusCode}\" ); } } }","title":"Delete a feature"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/","text":"Custom configurator in Angular In this tutorial I will provide a quick overview of how to implement your own customer-facing configurator in Angular. The resulting project is also available at github https://github.com/elfskot . If you are not familiar with Angular you should follow the Getting Started guide at https://angular.io/start . Setup the Angular project Create a new Angular project using your terminal ng new BrightwaterConfigurator --routing = true --style = css --skipTests = true In the index.html file add a reference to the Elfskot JS library and some basic CSS. < script src = \"https://elfskot.azureedge.net/elfskot-v0.1.js\" ></ script > < style > body { font-family : - apple-system , BlinkMacSystemFont , \"Segoe UI\" , Roboto , Helvetica , Arial , sans-serif , \"Apple Color Emoji\" , \"Segoe UI Emoji\" , \"Segoe UI Symbol\" ; } </ style > Remove all the contents of the app.component.html file but keep the router-outlet element < router-outlet ></ router-outlet > Product overview page First we create a component that will hold our product overview page using the ng generate command ng generate component Products Product overview route Now that we have the Products component, we should register it as the base route. In the app-routing-module.ts file add a route to the Products component import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { ProductsComponent } from './products/products.component' ; const routes : Routes = [ { path : '' , component : ProductsComponent } // <-- Route to the Products component ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Product overview component The first step to creating our product overview is the retrieve a list of all available configuration models. In the ngOnInit method of the products.component.ts file call the Elfskot.configurator.getConfigurationModels method import { Component , OnInit } from '@angular/core' ; declare var Elfskot ; @Component ({ selector : 'app-products' , templateUrl : './products.component.html' , styleUrls : [ './products.component.css' ] }) export class ProductsComponent implements OnInit { products : any [] = []; constructor () { } ngOnInit() { Elfskot . configurator . getConfigurationModels ( 'en' , ( productOverview ) => { this . products = productOverview . features ; }); } } The Elfskot.configurator.getConfigurationModels method takes 2 parameters The preferred language ISO A callback function The callback function provides a object, with different elements, that can be used to setup your product selection page. For now we will only be using the features. Next we add HTML and CSS to the ProductsComponent . In the products.component.html file add < div class = \"product-overview\" > < div * ngFor = \"let product of products\" class = \"product-card\" [ routerLink ]=\"[' configure ', product . featureModelId ]\" > < img [ src ]=\" product . imageUrl \" /> < h3 [ innerHTML ]=\" product . description \" ></ h3 > </ div > </ div > In the products.component.css file add . product-overview { display : flex ; flex-direction : row ; flex-wrap : wrap ; } . product-card { box-shadow : 0 1 px 3 px rgba ( 0 , 0 , 0 , 0.12 ), 0 1 px 2 px rgba ( 0 , 0 , 0 , 0.24 ); transition : all 0.3 s cubic-bezier ( .25 , .8 , .25 , 1 ); cursor : pointer ; margin : 12 px ; width : 320 px ; } . product-card h3 { padding : 12 px ; } . product-card img { width : 100 % ; height : auto ; } . product-card : hover { box-shadow : 0 3 px 6 px rgba ( 0 , 0 , 0 , 0.16 ), 0 3 px 6 px rgba ( 0 , 0 , 0 , 0.23 ); } If we were to run the Angular project now we would get the following result: Configurator page Now that we have a product selection page, we can proceed to build the actual configurator. First add a ConfiguratorComponent ng generate component Configurator Register a configuration route in the app-routing.module.ts import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { ProductsComponent } from './products/products.component' ; import { ConfiguratorComponent } from './configurator/configurator.component' ; const routes : Routes = [ { path : '' , component : ProductsComponent }, { path : 'configure/:id' , component : ConfiguratorComponent } // <-- Route to the Configurator component ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In the configure route we added a id parameter that will be used to hold the identifier of the selected configuration model in the product overview page. Configurator Component First add a declaration for the global Elfskot variable. Your configurator.component.ts file should look like this import { Component , OnInit } from '@angular/core' ; declare var Elfskot ; @Component ({ selector : 'app-configurator' , templateUrl : './configurator.component.html' , styleUrls : [ './configurator.component.css' ] }) export class ConfiguratorComponent implements OnInit { constructor () { } ngOnInit() { } } Add the reference to the current route to the constructor and a private field to hold the configuration object we will retrieve later. private configuration = null ; constructor ( private route : ActivatedRoute ) { } Now in the ngOnInit we will add a listener for parameter changes in the route. If the route changes we will start a new configuration session ngOnInit() { this . route . params . subscribe (( params ) => { this . startNewSession ( params [ 'id' ]); }); } Add a private method to start a new configuration session private startNewSession ( id : string ) : void { Elfskot . configurator . startNewConfiguration ( id , 'en' , ( configuration ) => { this . configuration = configuration ; }); } The Elfskot.configurator.startNewConfiguration method takes 3 parameters The identifier of the configuration model A language iso Callback method that takes the new configuration object The resulting configuration object contains many different fields that can be used to construct the interface of your configurator. In this tutorial we will be mainly focused on the totalPrice and steps fields. The steps field should be used to construct the user interface. The steps are structured as follows Steps Title (optional) Type (0 = Hotspots, 1 = 3D) Features * Description * UnitPrice * TotalPrice * Type (0 = Optional, 1 = Mandatory, 2 = Alternative, 3 = Or) * Features (Children of the current feature, recursive) * .. * ... ... To listen to changes in the configuration session we can add a configurationUpdated event listener in the ngOnInit function ngOnInit() { this . route . params . subscribe (( params ) => { this . startNewSession ( params [ 'id' ]); }); Elfskot . on ( 'configurationUpdated' , ( configuration ) => { this . configuration = configuration ; }); } The configurationUpdated event returns the entire updated configuration object including updated prices etc. The complete ConfiguratorComponent should look like this import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; declare var Elfskot ; @Component ({ selector : 'app-configurator' , templateUrl : './configurator.component.html' , styleUrls : [ './configurator.component.css' ] }) export class ConfiguratorComponent implements OnInit { private configuration = null ; constructor ( private route : ActivatedRoute ) { } ngOnInit() { this . route . params . subscribe (( params ) => { this . startNewSession ( params [ 'id' ]); }); Elfskot . on ( 'configurationUpdated' , ( configuration ) => { this . configuration = configuration ; }); } private startNewSession ( id : string ) : void { Elfskot . configurator . startNewConfiguration ( id , 'en' , ( configuration ) => { this . configuration = configuration ; }); } } Configurator Option component Because of the recursive nature of the Steps -> Features -> Features structure we will need to create a new Angular component to hold the options of the configurator. Add a ConfiguratorOption component to the project ng generate component ConfiguratorOption The ConfiguratorOption component will take a Feature object as input and act on all the user interactions for this feature. import { Component , OnInit , Input } from '@angular/core' ; declare var Elfskot ; @Component ({ selector : 'app-configurator-option' , templateUrl : './configurator-option.component.html' , styleUrls : [ './configurator-option.component.css' ] }) export class ConfiguratorOptionComponent implements OnInit { @Input ( 'feature' ) feature ; constructor () { } ngOnInit() { } toggle () : void { let value = 1 ; if ( this . feature . isSelected ) { value = 0 ; } Elfskot . configurator . updateRequirement ( this . feature . id , value ); } } The toggle function calls Elfskot.configurator.updateRequirement which takes 2 parameters The identifier of the selected element A value, which should be a number In the configurator-option.component.html file we define a template that can act on the different types of features < div class = \"configurator-option\" * ngIf = \"feature.type != 1 || feature.features.length > 0\" > < b * ngIf = \"feature.type == 1\" [ innerHTML ]=\" feature . description \" ></ b > < label * ngIf = \"feature.type == 0 || feature.type == 3\" > < img [ src ]=\" feature . imageUrl \" /> < input type = \"checkbox\" [ checked ]=\" feature . isSelected \" ( change )=\" toggle ()\" /> < span [ innerHTML ]=\" feature . description \" ></ span > < small > {{feature.unitPrice}} </ small > </ label > < label * ngIf = \"feature.type == 2\" > < img [ src ]=\" feature . imageUrl \" /> < input type = \"radio\" [ checked ]=\" feature . isSelected \" ( change )=\" toggle ()\" /> < span [ innerHTML ]=\" feature . description \" ></ span > < small > {{feature.unitPrice}} </ small > </ label > < app-configurator-option * ngFor = \"let child of feature.features\" [ feature ]=\" child \" ></ app-configurator-option > </ div > In the configurator-option.component.css file add some CSS to aid in displaying the structure of the configuration model img { width : 24 px ; height : 24 px ; border-radius : 50 % ; } label { display : flex ; align-items : center ; cursor : pointer ; } . configurator-option { padding-left : 32 px ; margin-bottom : 6 px ; position : relative ; } small { font-style : italic ; font-size : 10 px ; color : #f00 ; } Add the ConfiguratorOption component to the ConfiguratorComponent Now that we have the ConfiguratorOption component defined, we can add it to the configurator page. In the configurator.component.html we create a loop that will iterate over the different steps of the configuration model and call the ConfiguratorOption component for each rootfeature in the step. < div * ngIf = \"configuration\" class = \"configurator-container\" > < h2 [ innerHTML ]=\" configuration . root . description \" ></ h2 > < ng-container * ngFor = \"let step of configuration.steps\" > < app-configurator-option * ngFor = \"let feature of step.features\" [ feature ]=\" feature \" ></ app-configurator-option > </ ng-container > < h3 > Total price < small > {{configuration.totalPriceExclVat}} </ small ></ h3 > < button routerLink = \"/checkout\" > Request quote </ button > </ div > If we were to open a configuration now it would look like this Checkout page Now that we are able to configure a product, we can go ahead and request a quotation. Initialize the CheckoutComponent ng generate component Checkout And register a route to the CheckoutComponent in the app-routing.module.ts file import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { ProductsComponent } from './products/products.component' ; import { ConfiguratorComponent } from './configurator/configurator.component' ; import { CheckoutComponent } from './checkout/checkout.component' ; const routes : Routes = [ { path : '' , component : ProductsComponent }, { path : 'configure/:id' , component : ConfiguratorComponent }, { path : 'checkout' , component : CheckoutComponent } // <-- Route to the checkout page ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In the checkout.component.ts file we create a function that will call the Elfskot.configurator.requestQuote function and handle its response. import { Component , OnInit , ViewChild } from '@angular/core' ; import { Router } from '@angular/router' ; import { NgForm } from '@angular/forms' ; declare var Elfskot ; @Component ({ selector : 'app-checkout' , templateUrl : './checkout.component.html' , styleUrls : [ './checkout.component.css' ] }) export class CheckoutComponent implements OnInit { configuration = null ; isSubmitted = false ; constructor ( private router : Router ) { } ngOnInit() { if ( ! Elfskot . configurator . configuration ){ this . router . navigateByUrl ( '/' ); return ; } this . configuration = Elfskot . configurator . configuration ; } requestQuote ( model ) { Elfskot . configurator . requestQuote ( model , () => { this . isSubmitted = true ; }); } } The checkout.component.html file is divided in 2 sections: before the request is submitted and after the request is submitted < h3 * ngIf = \"configuration\" > Request quote < small > {{configuration.root.description}} </ small ></ h3 > < div * ngIf = \"!isSubmitted\" > < form # checkoutForm = \"ngForm\" ( ngSubmit )=\" requestQuote ( checkoutForm . value )\" > < fieldset > < legend > Request quote </ legend > < label > First name < input type = \"text\" name = \"firstName\" ngModel /></ label > < label > Last name < input type = \"text\" name = \"lastName\" ngModel /></ label > < label > Company name < input type = \"text\" name = \"companyName\" ngModel /></ label > < label > Phone number < input type = \"text\" name = \"phoneNumber\" ngModel /></ label > < label > Email < input type = \"email\" name = \"email\" ngModel /></ label > < label > Street < input type = \"email\" name = \"streetName\" ngModel /></ label > < label > Postal code < input type = \"email\" name = \"postalCode\" ngModel /></ label > < input type = \"submit\" value = \"Submit\" /> </ fieldset > </ form > </ div > < div * ngIf = \"isSubmitted\" > < h2 > Thank you for your quotation request! </ h2 > </ div > Result","title":"Tutorial: Custom configurator in Angular"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#custom-configurator-in-angular","text":"In this tutorial I will provide a quick overview of how to implement your own customer-facing configurator in Angular. The resulting project is also available at github https://github.com/elfskot . If you are not familiar with Angular you should follow the Getting Started guide at https://angular.io/start .","title":"Custom configurator in Angular"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#setup-the-angular-project","text":"Create a new Angular project using your terminal ng new BrightwaterConfigurator --routing = true --style = css --skipTests = true In the index.html file add a reference to the Elfskot JS library and some basic CSS. < script src = \"https://elfskot.azureedge.net/elfskot-v0.1.js\" ></ script > < style > body { font-family : - apple-system , BlinkMacSystemFont , \"Segoe UI\" , Roboto , Helvetica , Arial , sans-serif , \"Apple Color Emoji\" , \"Segoe UI Emoji\" , \"Segoe UI Symbol\" ; } </ style > Remove all the contents of the app.component.html file but keep the router-outlet element < router-outlet ></ router-outlet >","title":"Setup the Angular project"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#product-overview-page","text":"First we create a component that will hold our product overview page using the ng generate command ng generate component Products","title":"Product overview page"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#product-overview-route","text":"Now that we have the Products component, we should register it as the base route. In the app-routing-module.ts file add a route to the Products component import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { ProductsComponent } from './products/products.component' ; const routes : Routes = [ { path : '' , component : ProductsComponent } // <-- Route to the Products component ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { }","title":"Product overview route"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#product-overview-component","text":"The first step to creating our product overview is the retrieve a list of all available configuration models. In the ngOnInit method of the products.component.ts file call the Elfskot.configurator.getConfigurationModels method import { Component , OnInit } from '@angular/core' ; declare var Elfskot ; @Component ({ selector : 'app-products' , templateUrl : './products.component.html' , styleUrls : [ './products.component.css' ] }) export class ProductsComponent implements OnInit { products : any [] = []; constructor () { } ngOnInit() { Elfskot . configurator . getConfigurationModels ( 'en' , ( productOverview ) => { this . products = productOverview . features ; }); } } The Elfskot.configurator.getConfigurationModels method takes 2 parameters The preferred language ISO A callback function The callback function provides a object, with different elements, that can be used to setup your product selection page. For now we will only be using the features. Next we add HTML and CSS to the ProductsComponent . In the products.component.html file add < div class = \"product-overview\" > < div * ngFor = \"let product of products\" class = \"product-card\" [ routerLink ]=\"[' configure ', product . featureModelId ]\" > < img [ src ]=\" product . imageUrl \" /> < h3 [ innerHTML ]=\" product . description \" ></ h3 > </ div > </ div > In the products.component.css file add . product-overview { display : flex ; flex-direction : row ; flex-wrap : wrap ; } . product-card { box-shadow : 0 1 px 3 px rgba ( 0 , 0 , 0 , 0.12 ), 0 1 px 2 px rgba ( 0 , 0 , 0 , 0.24 ); transition : all 0.3 s cubic-bezier ( .25 , .8 , .25 , 1 ); cursor : pointer ; margin : 12 px ; width : 320 px ; } . product-card h3 { padding : 12 px ; } . product-card img { width : 100 % ; height : auto ; } . product-card : hover { box-shadow : 0 3 px 6 px rgba ( 0 , 0 , 0 , 0.16 ), 0 3 px 6 px rgba ( 0 , 0 , 0 , 0.23 ); } If we were to run the Angular project now we would get the following result:","title":"Product overview component"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#configurator-page","text":"Now that we have a product selection page, we can proceed to build the actual configurator. First add a ConfiguratorComponent ng generate component Configurator Register a configuration route in the app-routing.module.ts import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { ProductsComponent } from './products/products.component' ; import { ConfiguratorComponent } from './configurator/configurator.component' ; const routes : Routes = [ { path : '' , component : ProductsComponent }, { path : 'configure/:id' , component : ConfiguratorComponent } // <-- Route to the Configurator component ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In the configure route we added a id parameter that will be used to hold the identifier of the selected configuration model in the product overview page.","title":"Configurator page"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#configurator-component","text":"First add a declaration for the global Elfskot variable. Your configurator.component.ts file should look like this import { Component , OnInit } from '@angular/core' ; declare var Elfskot ; @Component ({ selector : 'app-configurator' , templateUrl : './configurator.component.html' , styleUrls : [ './configurator.component.css' ] }) export class ConfiguratorComponent implements OnInit { constructor () { } ngOnInit() { } } Add the reference to the current route to the constructor and a private field to hold the configuration object we will retrieve later. private configuration = null ; constructor ( private route : ActivatedRoute ) { } Now in the ngOnInit we will add a listener for parameter changes in the route. If the route changes we will start a new configuration session ngOnInit() { this . route . params . subscribe (( params ) => { this . startNewSession ( params [ 'id' ]); }); } Add a private method to start a new configuration session private startNewSession ( id : string ) : void { Elfskot . configurator . startNewConfiguration ( id , 'en' , ( configuration ) => { this . configuration = configuration ; }); } The Elfskot.configurator.startNewConfiguration method takes 3 parameters The identifier of the configuration model A language iso Callback method that takes the new configuration object The resulting configuration object contains many different fields that can be used to construct the interface of your configurator. In this tutorial we will be mainly focused on the totalPrice and steps fields. The steps field should be used to construct the user interface. The steps are structured as follows Steps Title (optional) Type (0 = Hotspots, 1 = 3D) Features * Description * UnitPrice * TotalPrice * Type (0 = Optional, 1 = Mandatory, 2 = Alternative, 3 = Or) * Features (Children of the current feature, recursive) * .. * ... ... To listen to changes in the configuration session we can add a configurationUpdated event listener in the ngOnInit function ngOnInit() { this . route . params . subscribe (( params ) => { this . startNewSession ( params [ 'id' ]); }); Elfskot . on ( 'configurationUpdated' , ( configuration ) => { this . configuration = configuration ; }); } The configurationUpdated event returns the entire updated configuration object including updated prices etc. The complete ConfiguratorComponent should look like this import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; declare var Elfskot ; @Component ({ selector : 'app-configurator' , templateUrl : './configurator.component.html' , styleUrls : [ './configurator.component.css' ] }) export class ConfiguratorComponent implements OnInit { private configuration = null ; constructor ( private route : ActivatedRoute ) { } ngOnInit() { this . route . params . subscribe (( params ) => { this . startNewSession ( params [ 'id' ]); }); Elfskot . on ( 'configurationUpdated' , ( configuration ) => { this . configuration = configuration ; }); } private startNewSession ( id : string ) : void { Elfskot . configurator . startNewConfiguration ( id , 'en' , ( configuration ) => { this . configuration = configuration ; }); } }","title":"Configurator Component"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#configurator-option-component","text":"Because of the recursive nature of the Steps -> Features -> Features structure we will need to create a new Angular component to hold the options of the configurator. Add a ConfiguratorOption component to the project ng generate component ConfiguratorOption The ConfiguratorOption component will take a Feature object as input and act on all the user interactions for this feature. import { Component , OnInit , Input } from '@angular/core' ; declare var Elfskot ; @Component ({ selector : 'app-configurator-option' , templateUrl : './configurator-option.component.html' , styleUrls : [ './configurator-option.component.css' ] }) export class ConfiguratorOptionComponent implements OnInit { @Input ( 'feature' ) feature ; constructor () { } ngOnInit() { } toggle () : void { let value = 1 ; if ( this . feature . isSelected ) { value = 0 ; } Elfskot . configurator . updateRequirement ( this . feature . id , value ); } } The toggle function calls Elfskot.configurator.updateRequirement which takes 2 parameters The identifier of the selected element A value, which should be a number In the configurator-option.component.html file we define a template that can act on the different types of features < div class = \"configurator-option\" * ngIf = \"feature.type != 1 || feature.features.length > 0\" > < b * ngIf = \"feature.type == 1\" [ innerHTML ]=\" feature . description \" ></ b > < label * ngIf = \"feature.type == 0 || feature.type == 3\" > < img [ src ]=\" feature . imageUrl \" /> < input type = \"checkbox\" [ checked ]=\" feature . isSelected \" ( change )=\" toggle ()\" /> < span [ innerHTML ]=\" feature . description \" ></ span > < small > {{feature.unitPrice}} </ small > </ label > < label * ngIf = \"feature.type == 2\" > < img [ src ]=\" feature . imageUrl \" /> < input type = \"radio\" [ checked ]=\" feature . isSelected \" ( change )=\" toggle ()\" /> < span [ innerHTML ]=\" feature . description \" ></ span > < small > {{feature.unitPrice}} </ small > </ label > < app-configurator-option * ngFor = \"let child of feature.features\" [ feature ]=\" child \" ></ app-configurator-option > </ div > In the configurator-option.component.css file add some CSS to aid in displaying the structure of the configuration model img { width : 24 px ; height : 24 px ; border-radius : 50 % ; } label { display : flex ; align-items : center ; cursor : pointer ; } . configurator-option { padding-left : 32 px ; margin-bottom : 6 px ; position : relative ; } small { font-style : italic ; font-size : 10 px ; color : #f00 ; }","title":"Configurator Option component"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#add-the-configuratoroption-component-to-the-configuratorcomponent","text":"Now that we have the ConfiguratorOption component defined, we can add it to the configurator page. In the configurator.component.html we create a loop that will iterate over the different steps of the configuration model and call the ConfiguratorOption component for each rootfeature in the step. < div * ngIf = \"configuration\" class = \"configurator-container\" > < h2 [ innerHTML ]=\" configuration . root . description \" ></ h2 > < ng-container * ngFor = \"let step of configuration.steps\" > < app-configurator-option * ngFor = \"let feature of step.features\" [ feature ]=\" feature \" ></ app-configurator-option > </ ng-container > < h3 > Total price < small > {{configuration.totalPriceExclVat}} </ small ></ h3 > < button routerLink = \"/checkout\" > Request quote </ button > </ div > If we were to open a configuration now it would look like this","title":"Add the ConfiguratorOption component to the ConfiguratorComponent"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#checkout-page","text":"Now that we are able to configure a product, we can go ahead and request a quotation. Initialize the CheckoutComponent ng generate component Checkout And register a route to the CheckoutComponent in the app-routing.module.ts file import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { ProductsComponent } from './products/products.component' ; import { ConfiguratorComponent } from './configurator/configurator.component' ; import { CheckoutComponent } from './checkout/checkout.component' ; const routes : Routes = [ { path : '' , component : ProductsComponent }, { path : 'configure/:id' , component : ConfiguratorComponent }, { path : 'checkout' , component : CheckoutComponent } // <-- Route to the checkout page ]; @NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In the checkout.component.ts file we create a function that will call the Elfskot.configurator.requestQuote function and handle its response. import { Component , OnInit , ViewChild } from '@angular/core' ; import { Router } from '@angular/router' ; import { NgForm } from '@angular/forms' ; declare var Elfskot ; @Component ({ selector : 'app-checkout' , templateUrl : './checkout.component.html' , styleUrls : [ './checkout.component.css' ] }) export class CheckoutComponent implements OnInit { configuration = null ; isSubmitted = false ; constructor ( private router : Router ) { } ngOnInit() { if ( ! Elfskot . configurator . configuration ){ this . router . navigateByUrl ( '/' ); return ; } this . configuration = Elfskot . configurator . configuration ; } requestQuote ( model ) { Elfskot . configurator . requestQuote ( model , () => { this . isSubmitted = true ; }); } } The checkout.component.html file is divided in 2 sections: before the request is submitted and after the request is submitted < h3 * ngIf = \"configuration\" > Request quote < small > {{configuration.root.description}} </ small ></ h3 > < div * ngIf = \"!isSubmitted\" > < form # checkoutForm = \"ngForm\" ( ngSubmit )=\" requestQuote ( checkoutForm . value )\" > < fieldset > < legend > Request quote </ legend > < label > First name < input type = \"text\" name = \"firstName\" ngModel /></ label > < label > Last name < input type = \"text\" name = \"lastName\" ngModel /></ label > < label > Company name < input type = \"text\" name = \"companyName\" ngModel /></ label > < label > Phone number < input type = \"text\" name = \"phoneNumber\" ngModel /></ label > < label > Email < input type = \"email\" name = \"email\" ngModel /></ label > < label > Street < input type = \"email\" name = \"streetName\" ngModel /></ label > < label > Postal code < input type = \"email\" name = \"postalCode\" ngModel /></ label > < input type = \"submit\" value = \"Submit\" /> </ fieldset > </ form > </ div > < div * ngIf = \"isSubmitted\" > < h2 > Thank you for your quotation request! </ h2 > </ div >","title":"Checkout page"},{"location":"ems/api/tutorial/angularconfigurator/angular_configurator/#result","text":"","title":"Result"},{"location":"ems/lib/api-definition/","text":"By including the Elfsquad JavaScript library in your web project the Elfsquad object becomes globally available in your site. The Elfsquad object consists of three parts: Configurator Viewer3D DataManagement UserManager Configurator Elfsquad.configurator is used for all configuration related interactions. Methods getConfigurationModels(language) Retrieves a production selection model that can be used to create a model selection page. Input Parameter Type Description language string Two-letter ISO code of the language Output Example Elfsquad . configurator . getConfigurationModels ( 'en' ) . then (( productSelectionModel ) => { /* ... */ }); startNewConfiguration(id,language) Starts a new configuration session and returns a promise with the configuration object . Input Parameter Type Description id string Identifier of the configuration model language string Two-letter ISO code of the language Output A promise with the configuration object . Example Elfsquad . configurator . startNewConfiguration ( '<INSERT ID>' , 'en' ) . then (( configuration ) => { /* ... */ }); changeLanguage(language, callback) Changes the language of the configuration session and calls the callback function with the updated configuration object . Input Parameter Type Description language string Two-letter ISO code of the language callback function Function that is called with the updated configuration object Output Callback function is called the configuration object as a parameter. Example Elfsquad . configurator . changeLanguage ( 'en' , ( updatedConfiguration ) => { /* ... */ }); updateRequirement(id, value, ignoreConflicts, isSelection) Update the user requirement for a given configuration feature. Input Parameter Type Description id string Identifier of the configuration feature to update value number Value to set. If the requirement is a selection, the value should be 1 for true and 0 for false. ignoreConflicts boolean When ignoring conflicts, conflicts will be resolved automatically. isSelection boolean Value indicating whether the requirement is a selection change or value change. Output A promise with the configuration object . Example Elfsquad . configurator . updateRequirement ( '<INSERT ID>' , 1 , false , true ) . then (( updatedConfiguration ) => { /* ... */ }); requestQuote(form, callback) Request a quotation for the configuration. Input Parameter Type Description form object Object containing quotation request data (see below). callback function Function that is called when the quotation request was successful. Form object Parameter Type firstName string lastName string lastNamePrefix string salutation string email string city string postalCode string streetName string houseNumber string countryIso string languageIso string phoneNumber string phoneNumber2 string companyName string remarks string Properties Viewer3D The Viewer3D object is used to initialize and interact with the 3D viewer. The Viewer3D object is accessible through Elfsquad.configurator.viewer3D . Methods init3DViewer(element, configuration, callback) Takes a HTML element and turns in into a 3D viewer. Input Parameter Type Description element HTMLElement Reference to a HTML element that should be turned into the 3D viewer configuration Configuration The current configuration object callback Function Function that is called when the loader is finished loading DataManagement Elfsquad.dataManagement is used for retrieving/editing master data. Methods Properties UserManager Elfsquad.userManager is used for authentication/authorization related interactions. Methods getUser() Retrieves the oidc client user object. For more info see https://github.com/IdentityModel/oidc-client-js/wiki . Output Returns the oidc client User object loginRedirect() Invokes the redirection login flow through the oidc-client. For more info see https://github.com/IdentityModel/oidc-client-js/wiki . logout() Invokes the redirection logout flow through the oidc-client. . For more info see https://github.com/IdentityModel/oidc-client-js/wiki . Properties _oidcUserManager Reference to the OIDC user manager object .","title":"API defintion"},{"location":"ems/lib/api-definition/#configurator","text":"Elfsquad.configurator is used for all configuration related interactions.","title":"Configurator"},{"location":"ems/lib/api-definition/#methods","text":"","title":"Methods"},{"location":"ems/lib/api-definition/#getconfigurationmodelslanguage","text":"Retrieves a production selection model that can be used to create a model selection page.","title":"getConfigurationModels(language)"},{"location":"ems/lib/api-definition/#input","text":"Parameter Type Description language string Two-letter ISO code of the language","title":"Input"},{"location":"ems/lib/api-definition/#output","text":"","title":"Output"},{"location":"ems/lib/api-definition/#example","text":"Elfsquad . configurator . getConfigurationModels ( 'en' ) . then (( productSelectionModel ) => { /* ... */ });","title":"Example"},{"location":"ems/lib/api-definition/#startnewconfigurationidlanguage","text":"Starts a new configuration session and returns a promise with the configuration object .","title":"startNewConfiguration(id,language)"},{"location":"ems/lib/api-definition/#input_1","text":"Parameter Type Description id string Identifier of the configuration model language string Two-letter ISO code of the language","title":"Input"},{"location":"ems/lib/api-definition/#output_1","text":"A promise with the configuration object .","title":"Output"},{"location":"ems/lib/api-definition/#example_1","text":"Elfsquad . configurator . startNewConfiguration ( '<INSERT ID>' , 'en' ) . then (( configuration ) => { /* ... */ });","title":"Example"},{"location":"ems/lib/api-definition/#changelanguagelanguage-callback","text":"Changes the language of the configuration session and calls the callback function with the updated configuration object .","title":"changeLanguage(language, callback)"},{"location":"ems/lib/api-definition/#input_2","text":"Parameter Type Description language string Two-letter ISO code of the language callback function Function that is called with the updated configuration object","title":"Input"},{"location":"ems/lib/api-definition/#output_2","text":"Callback function is called the configuration object as a parameter.","title":"Output"},{"location":"ems/lib/api-definition/#example_2","text":"Elfsquad . configurator . changeLanguage ( 'en' , ( updatedConfiguration ) => { /* ... */ });","title":"Example"},{"location":"ems/lib/api-definition/#updaterequirementid-value-ignoreconflicts-isselection","text":"Update the user requirement for a given configuration feature.","title":"updateRequirement(id, value, ignoreConflicts, isSelection)"},{"location":"ems/lib/api-definition/#input_3","text":"Parameter Type Description id string Identifier of the configuration feature to update value number Value to set. If the requirement is a selection, the value should be 1 for true and 0 for false. ignoreConflicts boolean When ignoring conflicts, conflicts will be resolved automatically. isSelection boolean Value indicating whether the requirement is a selection change or value change.","title":"Input"},{"location":"ems/lib/api-definition/#output_3","text":"A promise with the configuration object .","title":"Output"},{"location":"ems/lib/api-definition/#example_3","text":"Elfsquad . configurator . updateRequirement ( '<INSERT ID>' , 1 , false , true ) . then (( updatedConfiguration ) => { /* ... */ });","title":"Example"},{"location":"ems/lib/api-definition/#requestquoteform-callback","text":"Request a quotation for the configuration.","title":"requestQuote(form, callback)"},{"location":"ems/lib/api-definition/#input_4","text":"Parameter Type Description form object Object containing quotation request data (see below). callback function Function that is called when the quotation request was successful.","title":"Input"},{"location":"ems/lib/api-definition/#form-object","text":"Parameter Type firstName string lastName string lastNamePrefix string salutation string email string city string postalCode string streetName string houseNumber string countryIso string languageIso string phoneNumber string phoneNumber2 string companyName string remarks string","title":"Form object"},{"location":"ems/lib/api-definition/#properties","text":"","title":"Properties"},{"location":"ems/lib/api-definition/#viewer3d","text":"The Viewer3D object is used to initialize and interact with the 3D viewer. The Viewer3D object is accessible through Elfsquad.configurator.viewer3D .","title":"Viewer3D"},{"location":"ems/lib/api-definition/#methods_1","text":"","title":"Methods"},{"location":"ems/lib/api-definition/#init3dviewerelement-configuration-callback","text":"Takes a HTML element and turns in into a 3D viewer.","title":"init3DViewer(element, configuration, callback)"},{"location":"ems/lib/api-definition/#input_5","text":"Parameter Type Description element HTMLElement Reference to a HTML element that should be turned into the 3D viewer configuration Configuration The current configuration object callback Function Function that is called when the loader is finished loading","title":"Input"},{"location":"ems/lib/api-definition/#datamanagement","text":"Elfsquad.dataManagement is used for retrieving/editing master data.","title":"DataManagement"},{"location":"ems/lib/api-definition/#methods_2","text":"","title":"Methods"},{"location":"ems/lib/api-definition/#properties_1","text":"","title":"Properties"},{"location":"ems/lib/api-definition/#usermanager","text":"Elfsquad.userManager is used for authentication/authorization related interactions.","title":"UserManager"},{"location":"ems/lib/api-definition/#methods_3","text":"","title":"Methods"},{"location":"ems/lib/api-definition/#getuser","text":"Retrieves the oidc client user object. For more info see https://github.com/IdentityModel/oidc-client-js/wiki .","title":"getUser()"},{"location":"ems/lib/api-definition/#output_4","text":"Returns the oidc client User object","title":"Output"},{"location":"ems/lib/api-definition/#loginredirect","text":"Invokes the redirection login flow through the oidc-client. For more info see https://github.com/IdentityModel/oidc-client-js/wiki .","title":"loginRedirect()"},{"location":"ems/lib/api-definition/#logout","text":"Invokes the redirection logout flow through the oidc-client. . For more info see https://github.com/IdentityModel/oidc-client-js/wiki .","title":"logout()"},{"location":"ems/lib/api-definition/#properties_2","text":"","title":"Properties"},{"location":"ems/lib/api-definition/#_oidcusermanager","text":"Reference to the OIDC user manager object .","title":"_oidcUserManager"},{"location":"ems/lib/start/","text":"Get started using the Elfsquad JavaScript library Elfsquad JavaScript library allows you to implement your own custom web configurator interface. The library is available at https://elfskot.azureedge.net/elfskot-v0.1.js < script src = \"https://elfskot.azureedge.net/elfskot-v0.1.js\" ></ script > Check the library api definition for available methods in the library. Check the basic operations tutorial for quick start examples.","title":"Getting started"},{"location":"ems/lib/start/#get-started-using-the-elfsquad-javascript-library","text":"Elfsquad JavaScript library allows you to implement your own custom web configurator interface. The library is available at https://elfskot.azureedge.net/elfskot-v0.1.js < script src = \"https://elfskot.azureedge.net/elfskot-v0.1.js\" ></ script > Check the library api definition for available methods in the library. Check the basic operations tutorial for quick start examples.","title":"Get started using the Elfsquad JavaScript library"},{"location":"ems/lib/tutorials/basic-operations/","text":"This tutorials takes you through the most important parts of building a custom configurator. Retrieving a list of configuration models // TODO Starting a new configuration session // TODO Updating a configuration requirement // TODO Handling configuration conflicts // TODO Requesting a quote // TODO","title":"Basic operations"},{"location":"ems/lib/tutorials/basic-operations/#retrieving-a-list-of-configuration-models","text":"","title":"Retrieving a list of configuration models"},{"location":"ems/lib/tutorials/basic-operations/#todo","text":"","title":"// TODO"},{"location":"ems/lib/tutorials/basic-operations/#starting-a-new-configuration-session","text":"","title":"Starting a new configuration session"},{"location":"ems/lib/tutorials/basic-operations/#todo_1","text":"","title":"// TODO"},{"location":"ems/lib/tutorials/basic-operations/#updating-a-configuration-requirement","text":"","title":"Updating a configuration requirement"},{"location":"ems/lib/tutorials/basic-operations/#todo_2","text":"","title":"// TODO"},{"location":"ems/lib/tutorials/basic-operations/#handling-configuration-conflicts","text":"","title":"Handling configuration conflicts"},{"location":"ems/lib/tutorials/basic-operations/#todo_3","text":"","title":"// TODO"},{"location":"ems/lib/tutorials/basic-operations/#requesting-a-quote","text":"","title":"Requesting a quote"},{"location":"ems/lib/tutorials/basic-operations/#todo_4","text":"","title":"// TODO"},{"location":"ems/pyapi/start/","text":"Elfsquad PyApi The following code is the implementation of theElfsquad PyApi. It is adviced to store the code in a file elfskotapi.py , which can then be included in your Python projects. The usage of the PyApi is described in the remainder of this document. # Required packages: # pip3 install requests pandas import requests import json from enum import Enum import pandas as pd import math def unpack ( s ): return list ( s ) if type ( s ) != 'list' else s def head ( s ): return s [ 0 ] if len ( s ) > 0 else [] def tail ( s ): return s [ 1 :] def reverse ( s ): return s [:: - 1 ] def last ( s ): return s [ - 1 :] def init ( s ): return s [ 0 : len ( s ) - 1 ] def take ( s , n ): return s [: n ] def drop ( s , n ): return s [ n :] class TextType ( Enum ): Description = 0 ExtendedDescription = 1 MoreInfo = 2 class ElfskotApi (): base_address = 'https://api.elfsquad.io/api/2/' def __init__ ( self , application_id , secret ): self . application_id = application_id self . secret = secret self . get_token () def get_token ( self ): payload = { 'clientId' : self . application_id , 'secret' : self . secret } result = requests . post ( self . get_url ( 'auth/elfskotconnectlogin' ), json = payload ) self . check_result ( result ) self . token = json . loads ( result . text )[ 'accessToken' ] def check_result ( self , result ): if result . status_code != 200 : raise ValueError ( 'Error: API returned status code {} ' . format ( result . status_code )) return True def get_auth_header ( self ): return { 'Authorization' : 'bearer {} ' . format ( self . token )} def get_url ( self , endpoint ): return self . base_address + endpoint def http_return_if_valid ( self , result ): self . check_result ( result ) return json . loads ( result . text ) def http_get ( self , endpoint ): print ( endpoint ) return self . http_return_if_valid ( requests . get ( self . get_url ( endpoint ), headers = self . get_auth_header ()) ) def http_post ( self , endpoint , o ): return self . http_return_if_valid ( requests . post ( self . get_url ( endpoint ), json = o , headers = self . get_auth_header ()) ) def http_put ( self , endpoint , o ): return self . http_return_if_valid ( requests . put ( self . get_url ( endpoint ), json = o , headers = self . get_auth_header ()) ) def http_delete ( self , endpoint , key ): result = requests . delete ( self . get_url ( endpoint ) + '/ {} ' . format ( key ), headers = self . get_auth_header ()) if result . status_code != 200 : raise ValueError ( 'Error: API returned status code {} ' . format ( result . status_code )) def query ( self , endpoint ): return Query ( endpoint , self . http_get ) def all ( self , endpoint ): return self . query ( endpoint ) def find ( self , endpoint , p , v ): return self . query ( endpoint ) . filter ( p , v ) def get ( self , endpoint , k ): return self . find ( endpoint , 'id' , k ) def new ( self , endpoint , o ): return self . http_post ( endpoint , o ) def update ( self , endpoint , o ): return self . http_put ( endpoint , o ) def delete ( self , endpoint , k ): self . http_delete ( endpoint , k ) def help ( self , endpoint ): print ( 'Model for {} : \\r\\n {} ' . format ( endpoint , list ( self . first ( endpoint , 'id' , '' ) . keys ()))) class Query (): def __init__ ( self , endpoint , http ): self . http = http self . endpoint = endpoint self . parameters = {} self . data = [] self . index = 0 def raise_ ( self , t ): raise ValueError ( t ) def skip ( self , n ): if 'skip' in self . parameters : self . raise_ ( 'Skip already set.' ) self . parameters [ 'skip' ] = n return self def take ( self , n ): if 'limit' in self . parameters : self . raise_ ( 'Take already called.' ) self . parameters [ 'limit' ] = n return self # this does no require multiple includes yet, it is limited to # one field. def include ( self , name ): self . parameters [ 'include' ] = name return self def filter ( self , property , value ): self . parameters [ property ] = value return self def sort ( self , property , descending = False ): self . parameters [ 'orderby' ] = property return self def descending ( self ): self . parameters [ 'descending' ] = True return self def url_qry_params ( self ): return ' {} ? {} ' . format ( self . endpoint , '&' . join ([ ' {} = {} ' . format ( k , v ) for k , v in dict ( self . parameters ) . items ()])) . lower () def __next__ ( self ): if self . data == []: self . data = self . http ( self . url_qry_params ()) try : result = self . data [ self . index ] except IndexError : raise StopIteration self . index += 1 return result def __iter__ ( self ): return self def list ( self ): return list ( self ) def df ( self ): return pd . DataFrame ( self . list ()) def first ( self ): return head ( self . list ()) PyApi reference ElfskotApi The ElfskotApi object is a HTTP client which also handles the authorization token. It allows the GET , POST , PUT , and DELETE HTTP methods. The ElfskotApi is instantiated with a appId and secret which are found in the integration section of the EMS. The following example shows how to instantiate the object: db = ElfskotApi ( 'appId' , 'secret' ) The following methods are available for the ElfskotApi object: Expression Description Example query(endpoint) Return the Query object for the endpoint. db.query('features') all(endpoint) Returns the Query object for the endpoint. db.all('features') find(endpoint, property, value) Finds all objects with a property equal to the value. db.find('features','name','tire') get(endpoint, id) Finds a single object, based on an id. db.get('features', ...) new(endpoint, object) Creates a new object. db.new('features', feature) update(endpoint, object) Updates an object, it matches it by id. db.update('features',feature) delete(endpoint, id) Deletes an object, based on the id. db.delete('features', ...) help(endpoint ) Retrieves the first object in the endpoint, and displays all column names. db.help('features') Query The Query class allows you to compose HTTP requests for our API. It supports lazy evaluation, and the data is only requested when the data is enumerated, or accessed. The Query object helps with composing the url for the request. The Query object will allow you to use the query parameters that are supported by our API. The query parameters that are supported are: skip , limit , orderby , descending , include , and filter . The following methods are available in the Query object: Expression Description Example skip(int) Skips the first n results. db.all('features').skip(10) take(int) Limit the query to n results. db.all('features').take(10) include(string Includes the objects in a list of objects, for example, feature texts. db.all('features').include('texts') filter(string,any) Filter on a property in the model. db.all('features').filter('name','S6000') sort(string) Order the results on a property. db.all('features').sort('name') descending() Order the results in descending order. db.all('features').sort('name').descending() list() Returns the results as a list, this will evaluate the query. db.all('features').list() df() Returns the results as a DataFrame (requires pandas ), this will evaluate the query. db.all('features').df() first() Returns the first element in the results, this will evaluate the query. db.all('features').first() Note : If you want to retrieve a single object, use the take(1) expression with first() to evaluate the query. This ensures that the API is only processing a single record, which improves the speed. For example: db.all('features').sort('name').take(1).first() . Usage demonstration Getting started First instantiate a new ElfskotApi object with the appId and secret which are found in the integrations tab in your EMS. db = ElfskotApi ( 'appId' , 'secret' ) While initializing the object, an authorization token is requested from the API. When the object is initialized, it is now possible to query our REST API. As an example, we will request a sorted list (by name) of features. Also, the texts of the feature should be included in the query. Finally, we take the first feature that is found and print it. db . all ( 'features' ) . sort ( 'name' ) . include ( 'texts' ) . take ( 1 ) . first () {'articleCode': None, 'cardImageUrl': None, 'category': None, 'categoryId': None, 'createdDate': '2018-03-30T09:52:47.7797469+00:00', 'creatorId': '7c10626d-6d57-403c-ec51-08d56407f341', 'customField1': None, 'customField2': None, 'customField3': None, 'customField4': None, 'customField5': None, 'hiddenThreeDModelItems': [], 'id': 'be855af0-3cf2-47c0-bac8-08d595a67251', 'marginPct': 0.0, 'maxValue': 0.0, 'minValue': 0.0, 'name': None, 'organizationId': None, 'organizationName': None, 'organizationSellsFeature': None, 'packingUnit': 0.0, 'properties': None, 'reference': None, 'salesPrice': 0.0, 'salesPriceLabel': '\u20ac 0,00', 'stepValue': 0.0, 'subcategoryIds': [], 'synced': False, 'tags': [], 'texts': [], 'threeDModelItems': [], 'type': 0, 'unitOfMeasure': None, 'unitOfMeasurement': None, 'unitOfMeasurementId': None, 'updatedDate': '2018-10-10T12:09:21.8682548+00:00', 'vat': None, 'vatId': None} In the same way, it is possible to request all the categories from the API, and display them by id and name. Do note that the name is a multilingual field, therefore it returns a list with the names in each language. It is also required to include the texts, because this is a different object. list ( map ( lambda c : { c [ 'texts' ][ 0 ][ 'value' ]: c [ 'id' ]}, db . all ( 'categories' ) . include ( 'texts' ))) [{'Model': '4fde3e79-c90e-4844-3d1b-08d50589c407'}, {'Engine': 'c6619774-d2aa-4bc4-3d1d-08d50589c407'}, {'Transmission': 'b60ee5fb-bb67-4420-3d1e-08d50589c407'}, {'Exterior color': '3ef76c1c-0d4a-4598-3d1f-08d50589c407'}, {'Chassis': '79d10665-18ca-4405-3d20-08d50589c407'}, {'Interior': '88e43ee0-be1c-4efe-3d21-08d50589c407'}, {'Infotainment': 'dd2c73a1-007d-4c32-3d22-08d50589c407'}, {'Rims': 'a51f921f-8ba4-47b1-3d23-08d50589c407'}, {'Tires': '1c52e16f-fb87-41dd-3d24-08d50589c407'}, {'Exhaust': '2ad69069-8e98-4034-d91b-08d507486180'}, {'Sedans': '2ac6bffb-2543-48f3-f3d4-08d5688fd09d'}, {'Off-road': 'e4e18ddb-9cc2-4155-67c6-08d568a38d77'}]","title":"Getting started"},{"location":"ems/pyapi/start/#elfsquad-pyapi","text":"The following code is the implementation of theElfsquad PyApi. It is adviced to store the code in a file elfskotapi.py , which can then be included in your Python projects. The usage of the PyApi is described in the remainder of this document. # Required packages: # pip3 install requests pandas import requests import json from enum import Enum import pandas as pd import math def unpack ( s ): return list ( s ) if type ( s ) != 'list' else s def head ( s ): return s [ 0 ] if len ( s ) > 0 else [] def tail ( s ): return s [ 1 :] def reverse ( s ): return s [:: - 1 ] def last ( s ): return s [ - 1 :] def init ( s ): return s [ 0 : len ( s ) - 1 ] def take ( s , n ): return s [: n ] def drop ( s , n ): return s [ n :] class TextType ( Enum ): Description = 0 ExtendedDescription = 1 MoreInfo = 2 class ElfskotApi (): base_address = 'https://api.elfsquad.io/api/2/' def __init__ ( self , application_id , secret ): self . application_id = application_id self . secret = secret self . get_token () def get_token ( self ): payload = { 'clientId' : self . application_id , 'secret' : self . secret } result = requests . post ( self . get_url ( 'auth/elfskotconnectlogin' ), json = payload ) self . check_result ( result ) self . token = json . loads ( result . text )[ 'accessToken' ] def check_result ( self , result ): if result . status_code != 200 : raise ValueError ( 'Error: API returned status code {} ' . format ( result . status_code )) return True def get_auth_header ( self ): return { 'Authorization' : 'bearer {} ' . format ( self . token )} def get_url ( self , endpoint ): return self . base_address + endpoint def http_return_if_valid ( self , result ): self . check_result ( result ) return json . loads ( result . text ) def http_get ( self , endpoint ): print ( endpoint ) return self . http_return_if_valid ( requests . get ( self . get_url ( endpoint ), headers = self . get_auth_header ()) ) def http_post ( self , endpoint , o ): return self . http_return_if_valid ( requests . post ( self . get_url ( endpoint ), json = o , headers = self . get_auth_header ()) ) def http_put ( self , endpoint , o ): return self . http_return_if_valid ( requests . put ( self . get_url ( endpoint ), json = o , headers = self . get_auth_header ()) ) def http_delete ( self , endpoint , key ): result = requests . delete ( self . get_url ( endpoint ) + '/ {} ' . format ( key ), headers = self . get_auth_header ()) if result . status_code != 200 : raise ValueError ( 'Error: API returned status code {} ' . format ( result . status_code )) def query ( self , endpoint ): return Query ( endpoint , self . http_get ) def all ( self , endpoint ): return self . query ( endpoint ) def find ( self , endpoint , p , v ): return self . query ( endpoint ) . filter ( p , v ) def get ( self , endpoint , k ): return self . find ( endpoint , 'id' , k ) def new ( self , endpoint , o ): return self . http_post ( endpoint , o ) def update ( self , endpoint , o ): return self . http_put ( endpoint , o ) def delete ( self , endpoint , k ): self . http_delete ( endpoint , k ) def help ( self , endpoint ): print ( 'Model for {} : \\r\\n {} ' . format ( endpoint , list ( self . first ( endpoint , 'id' , '' ) . keys ()))) class Query (): def __init__ ( self , endpoint , http ): self . http = http self . endpoint = endpoint self . parameters = {} self . data = [] self . index = 0 def raise_ ( self , t ): raise ValueError ( t ) def skip ( self , n ): if 'skip' in self . parameters : self . raise_ ( 'Skip already set.' ) self . parameters [ 'skip' ] = n return self def take ( self , n ): if 'limit' in self . parameters : self . raise_ ( 'Take already called.' ) self . parameters [ 'limit' ] = n return self # this does no require multiple includes yet, it is limited to # one field. def include ( self , name ): self . parameters [ 'include' ] = name return self def filter ( self , property , value ): self . parameters [ property ] = value return self def sort ( self , property , descending = False ): self . parameters [ 'orderby' ] = property return self def descending ( self ): self . parameters [ 'descending' ] = True return self def url_qry_params ( self ): return ' {} ? {} ' . format ( self . endpoint , '&' . join ([ ' {} = {} ' . format ( k , v ) for k , v in dict ( self . parameters ) . items ()])) . lower () def __next__ ( self ): if self . data == []: self . data = self . http ( self . url_qry_params ()) try : result = self . data [ self . index ] except IndexError : raise StopIteration self . index += 1 return result def __iter__ ( self ): return self def list ( self ): return list ( self ) def df ( self ): return pd . DataFrame ( self . list ()) def first ( self ): return head ( self . list ())","title":"Elfsquad PyApi"},{"location":"ems/pyapi/start/#pyapi-reference","text":"","title":"PyApi reference"},{"location":"ems/pyapi/start/#elfskotapi","text":"The ElfskotApi object is a HTTP client which also handles the authorization token. It allows the GET , POST , PUT , and DELETE HTTP methods. The ElfskotApi is instantiated with a appId and secret which are found in the integration section of the EMS. The following example shows how to instantiate the object: db = ElfskotApi ( 'appId' , 'secret' ) The following methods are available for the ElfskotApi object: Expression Description Example query(endpoint) Return the Query object for the endpoint. db.query('features') all(endpoint) Returns the Query object for the endpoint. db.all('features') find(endpoint, property, value) Finds all objects with a property equal to the value. db.find('features','name','tire') get(endpoint, id) Finds a single object, based on an id. db.get('features', ...) new(endpoint, object) Creates a new object. db.new('features', feature) update(endpoint, object) Updates an object, it matches it by id. db.update('features',feature) delete(endpoint, id) Deletes an object, based on the id. db.delete('features', ...) help(endpoint ) Retrieves the first object in the endpoint, and displays all column names. db.help('features')","title":"ElfskotApi"},{"location":"ems/pyapi/start/#query","text":"The Query class allows you to compose HTTP requests for our API. It supports lazy evaluation, and the data is only requested when the data is enumerated, or accessed. The Query object helps with composing the url for the request. The Query object will allow you to use the query parameters that are supported by our API. The query parameters that are supported are: skip , limit , orderby , descending , include , and filter . The following methods are available in the Query object: Expression Description Example skip(int) Skips the first n results. db.all('features').skip(10) take(int) Limit the query to n results. db.all('features').take(10) include(string Includes the objects in a list of objects, for example, feature texts. db.all('features').include('texts') filter(string,any) Filter on a property in the model. db.all('features').filter('name','S6000') sort(string) Order the results on a property. db.all('features').sort('name') descending() Order the results in descending order. db.all('features').sort('name').descending() list() Returns the results as a list, this will evaluate the query. db.all('features').list() df() Returns the results as a DataFrame (requires pandas ), this will evaluate the query. db.all('features').df() first() Returns the first element in the results, this will evaluate the query. db.all('features').first() Note : If you want to retrieve a single object, use the take(1) expression with first() to evaluate the query. This ensures that the API is only processing a single record, which improves the speed. For example: db.all('features').sort('name').take(1).first() .","title":"Query"},{"location":"ems/pyapi/start/#usage-demonstration","text":"","title":"Usage demonstration"},{"location":"ems/pyapi/start/#getting-started","text":"First instantiate a new ElfskotApi object with the appId and secret which are found in the integrations tab in your EMS. db = ElfskotApi ( 'appId' , 'secret' ) While initializing the object, an authorization token is requested from the API. When the object is initialized, it is now possible to query our REST API. As an example, we will request a sorted list (by name) of features. Also, the texts of the feature should be included in the query. Finally, we take the first feature that is found and print it. db . all ( 'features' ) . sort ( 'name' ) . include ( 'texts' ) . take ( 1 ) . first () {'articleCode': None, 'cardImageUrl': None, 'category': None, 'categoryId': None, 'createdDate': '2018-03-30T09:52:47.7797469+00:00', 'creatorId': '7c10626d-6d57-403c-ec51-08d56407f341', 'customField1': None, 'customField2': None, 'customField3': None, 'customField4': None, 'customField5': None, 'hiddenThreeDModelItems': [], 'id': 'be855af0-3cf2-47c0-bac8-08d595a67251', 'marginPct': 0.0, 'maxValue': 0.0, 'minValue': 0.0, 'name': None, 'organizationId': None, 'organizationName': None, 'organizationSellsFeature': None, 'packingUnit': 0.0, 'properties': None, 'reference': None, 'salesPrice': 0.0, 'salesPriceLabel': '\u20ac 0,00', 'stepValue': 0.0, 'subcategoryIds': [], 'synced': False, 'tags': [], 'texts': [], 'threeDModelItems': [], 'type': 0, 'unitOfMeasure': None, 'unitOfMeasurement': None, 'unitOfMeasurementId': None, 'updatedDate': '2018-10-10T12:09:21.8682548+00:00', 'vat': None, 'vatId': None} In the same way, it is possible to request all the categories from the API, and display them by id and name. Do note that the name is a multilingual field, therefore it returns a list with the names in each language. It is also required to include the texts, because this is a different object. list ( map ( lambda c : { c [ 'texts' ][ 0 ][ 'value' ]: c [ 'id' ]}, db . all ( 'categories' ) . include ( 'texts' ))) [{'Model': '4fde3e79-c90e-4844-3d1b-08d50589c407'}, {'Engine': 'c6619774-d2aa-4bc4-3d1d-08d50589c407'}, {'Transmission': 'b60ee5fb-bb67-4420-3d1e-08d50589c407'}, {'Exterior color': '3ef76c1c-0d4a-4598-3d1f-08d50589c407'}, {'Chassis': '79d10665-18ca-4405-3d20-08d50589c407'}, {'Interior': '88e43ee0-be1c-4efe-3d21-08d50589c407'}, {'Infotainment': 'dd2c73a1-007d-4c32-3d22-08d50589c407'}, {'Rims': 'a51f921f-8ba4-47b1-3d23-08d50589c407'}, {'Tires': '1c52e16f-fb87-41dd-3d24-08d50589c407'}, {'Exhaust': '2ad69069-8e98-4034-d91b-08d507486180'}, {'Sedans': '2ac6bffb-2543-48f3-f3d4-08d5688fd09d'}, {'Off-road': 'e4e18ddb-9cc2-4155-67c6-08d568a38d77'}]","title":"Getting started"},{"location":"ems/sdk/applicationevents/","text":"Acting on application events Through ElfskotApiClient.Events you subscribe the different application events. Example class Program { static ElfskotApiClient elfskotApiClient; static void Main(string[] args) { elfskotApiClient = new ElfskotApiClient(new Guid(\"YOUR APPLICATION ID\"), \"YOUR SECRET\" ); elfskotApiClient.Events.QuotationRequested += Events_QuotationRequested; } private static void Events_QuotationRequested(object sender, IQuotationRequestedEventArgs e) { // Handle the quotation requested event. } }","title":"Acting on events"},{"location":"ems/sdk/applicationevents/#acting-on-application-events","text":"Through ElfskotApiClient.Events you subscribe the different application events.","title":"Acting on application events"},{"location":"ems/sdk/applicationevents/#example","text":"class Program { static ElfskotApiClient elfskotApiClient; static void Main(string[] args) { elfskotApiClient = new ElfskotApiClient(new Guid(\"YOUR APPLICATION ID\"), \"YOUR SECRET\" ); elfskotApiClient.Events.QuotationRequested += Events_QuotationRequested; } private static void Events_QuotationRequested(object sender, IQuotationRequestedEventArgs e) { // Handle the quotation requested event. } }","title":"Example"},{"location":"ems/sdk/start/","text":"Get started using the SDK (C#) Installation Our SDK is available as a NuGet package . Install the SDK using the NuGet package manager: Install-Package Elfskot.Connect.SDK Authentication See the Authentication section of the REST API on how to acquire your ApplicationId and Secret . Initializing the ElfskotApiClient All interactions with the Elfskot API are done using the ElfskotApiClient : var elfskotApiClient = new ElfskotApiClient ( new Guid ( \"YOUR APPLICATION ID\" ), \"YOUR SECRET\" ); Data management Data management interactions are done through ManagementResources that can be directly accessed through elfskotApiClient.Management . Retrieving entities To retrieve a entity by its ID you can use the GetById method: var contact = elfskotApiClient . Management . CrmContacts . GetById ( new Guid ( \"56448abb-f00e-45a8-b1ac-08c62c8ed8f5\" )); To retrieve multiple entities you can use the Get method: var contacts = elfskotApiClient . Management . CrmContacts . OrderBy ( c => c . CreatedDate ) . Limit ( 10 ) . Get (); Including referenced entities By default the API will not include referenced entities. So for example if you want to retrieve the lines of quotation you can use the Include method: var quotation = elfskotApiClient . Management . Quotations . Include ( q => q . Lines ) // <-- Reference the entity you want to include. . GetById ( new Guid ( \"56448abb-f00e-45a8-b1ac-08c62c8ed8f5\" )); foreach ( var line in quotation . Lines ) { } Inserting entities To insert entities you can use the Create and BulkCreate methods: var newCrmAccount = new CrmAccount () { CompanyName = \"Brightwater Industries\" }; newCrmAccount = elfskotApiClient . Management . CrmAccounts . Create ( newCrmAccount ); var newIdentifier = newCrmAccount . Id ; Updating entities To update a entity you can use the Update or BulkUpdate methods: quotation . Deliverydate = DateTimeOffset . Now ; elfskotApiClient . Management . Quotations . Update ( quotation ); Deleting entities To delete a entity you can use the Delete method: elfskotApiClient . Management . CrmContacts . Delete ( new Guid ( \"56448abb-f00e-45a8-b1ac-08c62c8ed8f5\" ));","title":"Getting started"},{"location":"ems/sdk/start/#get-started-using-the-sdk-c","text":"","title":"Get started using the SDK (C#)"},{"location":"ems/sdk/start/#installation","text":"Our SDK is available as a NuGet package . Install the SDK using the NuGet package manager: Install-Package Elfskot.Connect.SDK","title":"Installation"},{"location":"ems/sdk/start/#authentication","text":"See the Authentication section of the REST API on how to acquire your ApplicationId and Secret .","title":"Authentication"},{"location":"ems/sdk/start/#initializing-the-elfskotapiclient","text":"All interactions with the Elfskot API are done using the ElfskotApiClient : var elfskotApiClient = new ElfskotApiClient ( new Guid ( \"YOUR APPLICATION ID\" ), \"YOUR SECRET\" );","title":"Initializing the ElfskotApiClient"},{"location":"ems/sdk/start/#data-management","text":"Data management interactions are done through ManagementResources that can be directly accessed through elfskotApiClient.Management .","title":"Data management"},{"location":"ems/sdk/start/#retrieving-entities","text":"To retrieve a entity by its ID you can use the GetById method: var contact = elfskotApiClient . Management . CrmContacts . GetById ( new Guid ( \"56448abb-f00e-45a8-b1ac-08c62c8ed8f5\" )); To retrieve multiple entities you can use the Get method: var contacts = elfskotApiClient . Management . CrmContacts . OrderBy ( c => c . CreatedDate ) . Limit ( 10 ) . Get ();","title":"Retrieving entities"},{"location":"ems/sdk/start/#including-referenced-entities","text":"By default the API will not include referenced entities. So for example if you want to retrieve the lines of quotation you can use the Include method: var quotation = elfskotApiClient . Management . Quotations . Include ( q => q . Lines ) // <-- Reference the entity you want to include. . GetById ( new Guid ( \"56448abb-f00e-45a8-b1ac-08c62c8ed8f5\" )); foreach ( var line in quotation . Lines ) { }","title":"Including referenced entities"},{"location":"ems/sdk/start/#inserting-entities","text":"To insert entities you can use the Create and BulkCreate methods: var newCrmAccount = new CrmAccount () { CompanyName = \"Brightwater Industries\" }; newCrmAccount = elfskotApiClient . Management . CrmAccounts . Create ( newCrmAccount ); var newIdentifier = newCrmAccount . Id ;","title":"Inserting entities"},{"location":"ems/sdk/start/#updating-entities","text":"To update a entity you can use the Update or BulkUpdate methods: quotation . Deliverydate = DateTimeOffset . Now ; elfskotApiClient . Management . Quotations . Update ( quotation );","title":"Updating entities"},{"location":"ems/sdk/start/#deleting-entities","text":"To delete a entity you can use the Delete method: elfskotApiClient . Management . CrmContacts . Delete ( new Guid ( \"56448abb-f00e-45a8-b1ac-08c62c8ed8f5\" ));","title":"Deleting entities"}]}